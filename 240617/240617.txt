클래스(파일 단위) : 속성과 기능들을 한꺼번에 묶어놓은 집합체
	자바에서 만들 수 있는 최소 파일 단위
	공통적으로 처리해야하는 기능들이나 속성들을 묶어놓는 단위 = 모듈

패키지(디렉토리 단위, 폴더 단위)  : 클래스급 이상들의 파일을 한꺼번에 묶어놓은 집합체
- 클래스가 소속되어 있는 집합명 -> 클래스를 사용하기 위해서는 첫 줄에 package first;가 작성되어 있어야 함.


-----
#형식
// 클래스 선언문
[접근제어자 => public 또는 default만 올 수 있다.] class 클래스명{
// 멤버필드 선언문
[접근제어자 => public, protected, default, private 모두 가능] [기타제어자] 자료형 변수명;
}


// 생성자 선언문
[접근제어자 => public, protected, default, private 모두 가능] 클래스명 ([매개변수자료형 매개변수명, ]);{

}

// 메소드 선언문
[접근제어자 => public, protected, default, private 모두 가능] [기타제어자] 리턴타입 메소드명 ([매개변수자료형 매개변수명]) {
	실행코드;
	[return 돌려줄 값;]
}


-----
#키워드 this
this 키워드를 가지고 있는 클래스 복사본(인스턴스)을 가리키는 예약어
this.전역변수 혹은 메소드

-----
#캡슐화
캡슐화 : 여러 기능들과 속성들을 한 곳에 묶어서 내가 원하는 속성이나 메소드에 직접적으로 접근하지 못하도록 처리하는 방법

정보은닉 : 외부에서 절대 속성에 직접 접근할 수 없도록 감춰놓는 것
=> 전역변수 혹은 메소드의 접근제어자를 private로 처리한다.
ex)
package second;
public class A{
	private int year; // 자동초기화값 0
	private int month; // 자동초기화값 0
	private int date; // 자동초기화값 0

	// public A(){}

	public void setYear(int year){
		this.year = year; // this를 사용하지 않으면 변수와 값 모두 더 가까운 year인 매개변수로 인식해 매개변수 year = 매개변수 year로 인식하게 된다. => 지역변수에 값을 넣어줄 수 없음을 의미
	}

	public int getYear(){
		return year; // A 클래스 내부이기 때문에 전역변수 year에 접근할 수 있다.
	}
} 

public class B{
	public static void main(String[] args){
		A a = new A(); // classs의 접근제어자를 public 사용으로 다른 클래스지만 접근할 수 있다.
		a.year = 2024; // year의 접근제어자를 private 사용으로 B 클래스에서 A 클래스의 변수에 접근할 수 없다.
		a.setYear(2024); // 객체 a에 접근해서 setYear 메소드의 매개변수를 2024로 지정한다.
		int y = a.getYear(); // 객체 a에 접근해서 getYear 메소드에 접근한 뒤, 변수 y에 넣어준다(= getYear 메소드는 리턴값만 있기 때문에 반환된 값을 y가 받는다.)
		System.out.println(y);
	}
}

-----
#String
