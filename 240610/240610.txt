
JDK (Java Developmnet Kit) - 11.0.23 버전으로 설치
이클립스 (개발툴) - 2022-03 버전으로 설치
=> IDE (Intergreated Development Environment) => 코드 편집기, 컴파일, 인터프리터, 자동완성기능, 서버 연결 등 개발에 필요한 모든 환경을 가지고 있는 도구

* 기본 세팅
내 PC - 속성 - 고급 시스템 설정 - 환경 변수 - 시스템 변수 - 새로 만들기

변수 이름 : JAVA_HOME (대문자 필수)
변수 경로 : C:\Program Files\Java\jdk-11

확인 - Path 변수 편집 - 새로 만들기 - %JAVA_HOME%\bin 작성 - 확인 

cmd 창 실행 - (java -version) 자바 버전 확인 - (javac -version) 자바c 버전 확인

이클립스 압축파일 C드라이브로 복사 - 이클립스 압축해제 - 압축해제 후 폴더생성되면 압축파일 삭제

이클립스 workspace 설치경로 : C: - jwork 생성 - jwork 폴더 로 변경 후 설치

이클립스  window - Preferences - Java - Installed JREs - 17. 버전일 경우 Remove - add - standard VM - JRE home 옆 Directory - C:\Program Files\Java\jdk-11로 경로 변경 - apply - finish
General - workspace - Text file encoding - other: UTF-8로 변경 후 apply
검색 창에 files 검색 후 CSS,HTML,JSP 파일 모두 encoding을 UTF-8로 변경 후 apply 

자바로 프로젝트를 만들기 위한 기본 세팅 끝.

--------------------------------
회사에서는 주로 8 , 11, 17 사용 (LTS 버전이 이것들에만 있음)

JDK - 개발자 입장 : 개발에 필요한 라이브러리들
JRE (Java Runtime Environment) - 사용자 입장 => JVM (Java Virual Machine) - 컴파일러(번역기) : 자바프로그램을 실행할 때 필요한 라이브러리
=> 개발자 입장에서 편한 방식으로만 개발하는 것이 아닌 사용자의 입장에서 사용성도 고려해 개발해야한다.

이클립스 파일이 깨지거나 충돌 시 폴더 삭제 후 다시 압축해제하는 편이 설치하는 것보다 편리하기 때문에 압축파일로 사용

* JAVA

- 변수
숫자형 :	정수 : 음수, 양수, 0을 포함한 소수점 자리가 없는 수  => 기본값은 int 
  	- byte(1B) < short(2B) < int(4B) < long(8B)
	실수 : 소수점이 있는 수 = > 기본값은 double
 	 - float(4B) < double(8B)

문자형 : 문자 1개만 담을 수 있는 자료형 => char(2B)
논리형 : 진위여부 (참,거짓) 판별 자료형 => boolean => C언어 속 참은 1, 거짓은 0 이기때문에 기본값은 false
참조형 : 문자 여러개를 담을 수 있는 자료형 => String : 자료형이긴 하지만 첫 글자가 대문자이기 때문에 기본 자료형이 아닌 참조변수이자 객체임
=> 변수에 값 그대로를 담아두는 것이 아닌, 값이 있는 주소를 담아두고 그 주소를 불러와 출력시켜준다.

* 변수의 특징
정수 long이 실수 float보다 용량은 더 클지라도 실수는 소수점을 활용할 수 있어 정수보다 표현할 수 있는 영역이 크다. 

변수 (Variable) : 변경할 수 있는 값을 가진 공간, 마지막 값 1개만 저장할 수 있는 공간
변수 형식 : (Syntax)

변수 선언 : 값없이 정의만 한다. => 선언방법 :  (자료형 = 데이터타입 = 정보타입) 변수명; -> int a; => 무조건 맨처음 한번만 선언 가능.
변수 선언 및 초기화 : 값을 처음 설정하거나 값을 재할당한다. => 선언방법 : (자료형) 변수명 = 값; -> int a = 5 / char ch = 'A';
같은 자료형인 경우 int a = 5; int b = -13; int c = 200; 으로 작성할 수도 있지만, int a=5,b=-13,c=200; 으로 줄여서 작성할 수 있다.

* 변수명명규칙
권장규칙 )
1. 영어 소문자로 작성(첫 글자를 영어소문자로 기술) -> 프로젝트 속 많은 개발자들의 원활한 협업을 위해
2. 이름을 명시적으로(직관적으로) 작성 -> ex) int car;
3. 여러 개의 단어를 합쳐서 작성 시 카멜 기법,스네이크 기법으로 작성 -> ex) 카멜기법 : carCount , 스네이크기법 : car-count (자바에서는대시가 아닌 언더바로 car_count로 작성함.)
=> 풀스택 개발자를 희망하기 때문에 카멜 기법으로 작성하는 것을 습관화.

필수규칙 )
1. 숫자,문자,기호(_, $)만 가능
2. 첫 글자는 숫자가 올 수 없다. => _a는 가능하지만, 1a는 불가능.
3. 이름사이에 공백이 올 수 없다. => car count는 불가능. 공백 때문에 컴퓨터가 변수명을 이해할 수 없다.
4. 키워드(= 예약어, 정해놓은 고정단어들) 로는 이름을 지을 수 없다. => 변수명으로 int, true와 같은 단어로 작명할 수 없다. 하지만, trUe는 가능( 자바는 대소문자를 구별하기 때문에 true와 trUe는 다르다고 판단한다.)

--
구조화 프로그래밍
- 절차지향 기반, 순차(차례대로), 선택, 반복
- 순차구조 : 코드 작성 시 왼쪽에서부터, 코드를 읽어올 때는 위에서부터
- 선택구조 : 참/거짓 코드의 경우 코드의 결과값에 따라 생략되어지는 코드가 있을 수 있기 때문에
- 반복구조 : 같은 코드를 여러번 작성하는 것이 아닌 반복문으로 활용 가능


// 소괄호 용도 : 메소드 선언 시 매개변수(Parameter Variable)를 기술하는 공간, 메소드 호출 시 매개인자(Argumnet Value)를 넣는 공간.
// 중괄호 용도 : 클래스, 변수, 객체 등의 생명을 결정하는 공간(영역), 선언 시 사용하는 범위를 지정하는 기호, 자료형에서는 배열 값을 넣는 용도.
// 대괄호 용도 : 배열을 선언하거나 공간을 설정할 때 사용하는 용도.
// 자바에서 프로그램을 실행할 수 있는 가장 최소 단위 : class

[확장자 파일명]
실행프로그램 : *.exe
자바프로그램 : *.java => 자바프로그램을 번역하는 도구 : 자바 컴파일러 => .class => 번역한 프로그램을 해석해서 시스템에 알려주는 도구 => 인터프리터 
HTML : *.html
CSS : *.css



-------- 
이클립스를 활용한 코드작성
이클립스 우측 상단 Open Preferences ->JAVA 선택 -> NEW -> JAVA project -> 프로젝트명 작성 -> JRE SE 11 버전인지 확인 -> NEXT -> FINISH = 프로젝트 생성 완료
.java 생성 시 src 폴더 내에 만들어야한다. 

클래스 명명규칙 
1. 첫 글자 대문자로 작명.


* 자바의 특징 
1. 매소드 안(같은 공간)에서 변수 이름이나 객체 이름은 중복값을 가질 수 없다. 
2. 문자 : 글자 1개 => '' 작은따옴표 이용
문자들(=문자열) : 글자 여러개 => "" 큰따옴표 이용
3. 어떤 자료를 출력해도 String(자료형)으로 출력된다.

-

* 연산

연산 : 명령문을 실행해서 처리하는 것

연산자(오퍼레이터 = Operator) : 피연산자를 연산처리하기 위한 기호
피연산자(항 = 오퍼런드 = Operand) : 연산의 대상이 되는 것을 말함.

ex) int a = 5 + 8 ; / +는 연산자 5와 8은 피연산자 

연산자의 종류 및 우선순위
1. 괄호연산자 : () {} []

2. 단항연산자 (항이 한 개인 연산자)
- 논리 : ! (부정=아니다=NOT) ex) !true -> 참이 아니다. 즉, false를 의미
- 비트 : ~ (NOT)
- 전위연산자 : ++ -- ex) ++a --a
- 접근연산자 : . ex) System.out.println(); -> System 클래스에 접근해서 out 객체에 접근해 println 메소드에 접근하시오.를 의미함
- 부호연산자 : + - ex) +5, -5

3. 이항연산자 (항이 두 개인 연산자)
- 결합(문자열 결합) : + ex) "가" + 5 = "가5" => 항의 자료형의 종류에 따라 산술연산자와 결합연산으로 구분된다. 
- 산술연산 : *(곱셈) /(나눗셈-몫) %(나눗셈-나머지) +(덧셈) -(뺄셈) 
ex) 28/5 => 5.6  28%5 =>3 ->  같은 숫자를 사용하더라도 연산자에 따라 이렇게 다르게 출력된다.
- 비교 : == != < <= > >= instanceof
- 논리 : 
비트 : &(논리곱 AND => 모두 참인 경우만 참, 나머지는 거짓)
	|(논리합 OR => 모두 거짓인 경우만 거짓, 나머지는 참)
	^ (배타적논리합 XOR => 항이 서로 다른 경우만 참, 나머지는 거짓) => 값을 1,0으로 변환

----> 조건식에서 사용
논리곱 : && (두 조건이 모두 참인 경우만 참)
논리합 : || (두 조건 중 하나라도 참인 경우 참)
=> 값을 true, false로 반환함

4. 삼항연산자 (항이 세 개인 연산자)
=> 조건식 ? 참일 때의 실행문이나 값 : 거짓일 때의 실행문이나 값

5. 대입연산자 : = *= /= %= += -=

6. 후위연산자 : ++ --


=====
https://special-o.tistory.com/5
https://eunoia3jy.tistory.com/25