해석순서
from - where - group by - having - select - order by 
select절에서 선언한 별칭은 order by절에서 사용 가능

#DML
DML : 데이터 조작어
원본 변경이 생김

자동확정이 되지 않는다.(임시저장) -> 반드시 자동확정이나 되돌리기를 해줘야만 한다.



- INSERT
INSERT(삽입) : 새로운 행을 추가
	정식형식 : INSERT INTO 테이블명 (컬럼명1, 컬럼명2, ...) VALUES (컬럼1에 대응되는 값1, 컬럼2에 대응되는 값2, ...);
	-> 내가 원하는 컬럼만 지정해서 값을 넣을 수 있다.

	단축형식의 조건 : 반드시 전체 컬럼을 컬럼의 순서대로 나열해야 한다. => 모든 컬럼에 값을 넣는 경우 사용가능
	단축형식 :INSERT INTO 테이블명 VALUES (컬럼1에 대응하는값, 컬럼2에 대응되는 값2, 마지막컬럼에 대응되는 값);


// dept01 테이블에 부서번호 30, 부서명이 'SALES'인 데이터 추가
insert into dept01 (deptno, dname) values (30, 'SALES'); [정식형식]
insert into dept01 values (30, 'SALES', ''); [단축형식]

// dept01 테이블에 부서번호 40, 부서명 'OPERATIONS', LOC 'NULL'인 데이터 추가
insert into dept01 (deptno, dname) values (40, 'OPERATIONS'); [정식형식]
insert into dept01 values (40, 'OPERATIONS', null); [단축형식]

// dept01 테이블에 부서번호 50, 부서명 '', 위치가 'CHICAGO'인 데이터 추가
insert into dept01 (deptno, los) values (50, 'CHICAGO'); [정식형식]
insert into dept01 valuse(50, '', 'CHICAGO'); [단축형식]

- UPDATE
UPDATE(변경) : 기존의 행의 데이터를 변경
	형식 :  UPDATE 테이블명 SET 내가 변경하고자 하는 컬럼명1 = 변경할 값1 WHERE SELECT문의 조건과 기술 동일

- DELETE
DELETE(삭제) : 기존의 행을 테이블에서 삭제하는 명령문
	형식 : DELETE [FROM] 테이블명 WHERE 행조절조건;

// emp01 테이블에서 모든 부서의 사원을 삭제
delete [from] emp01;

// emp01 테이블에서 30번 부서의 사원을 삭제
delete from emp01 where deptno = 30;

// 
delete from emp01 where hiredate >= '1985/01/01';


insert into dept01 values (11, '경리부', '서울');
insert into dept01 values (12, '인사부', '인천');
insert into dept01 values (13, '영업부', '용인');
insert into dept01 values (14, '전산부', '수원');

emp01 테이블에 데이터 추가
// 부서번호 40, 이름 홍길동, 사번 9999, 직책 MANAGER, 급여 800, 커미션 100 입사일 2022-07-01
insert into emp01 (deptno, ename, empno, job, sal, comm, hiredate) values (40, '홍길동', 9999, 'MANAGER', 800, 100, '2022-07-01');
// 부서번호 40, 이름 고길동, 사번 1111, 직책 CEO, 급여 5000 커미션 2500, 입사일 1980-01-01
insert into emp01 (deptno, ename, empno, job, sal, comm, hiredate) values (40, '고길동', 1111, 'CEO', 5000, 2500, '1980-01-01');
// 부서번호 30, 이름 강영희, 사번 5555, 직책 WORKER
insert into emp01 (deptno, ename, empno, job) values (30, '강영희', 5555, 'WORKER');


// 1. 사원의 급여에 12를 곱한 결과만 출력되도록 수식 적용, 수식의 별칭을 "연봉"으로 표시
select salary * 12  연봉 from employ;

// 2. 업무가 '세일즈'인 사원의 이름, 업무, 부서아이디 검색
select name, job, deptid from employ where job = '세일즈';

// 3. 입사일이 '2001년 12월 3일'인 사원 검색
select * from employ where hiredate = '2001/12/03';

// 4. 급여가 3000 이상 5000 이하인 사원의 이름, 급여 검색
select name, salary from employ where salary >= 3000 and salary <= 5000;
select name, salary from employ where salary between 3000 and 5000;

// 5. 업무가 '사무직' 이거나 '경리'인 사원 검색
select * from employ where job = '사무직' or job = '경리';
select * from employ where job in('사무직','경리);

// 6. 급여가 3000 이상이고 업무가 '부장'인 사원 검색
select * from employ where salary >= 3000 and job = '부장';

// 7. 업무가 '세일즈'가 아니거나 '사무직'이 아닌 사원 검색
select * from employ where job != '세일즈' and job != '사무직';
select * from employ where not (job = '세일즈' or job = '사무직');
select * from employ where job not in ('세일즈', '사무직');

// 8. 이름에 '철'이 라는 문자가 포함되는 경우의 사원 검색
select * from employ where name like '%철%';

// 9. 보너스를 받지 않는 사원을 검색
select * from employ where bonus is null or bonus = '0' ;
select * from employ where nvl(bonus,0) = 0; // null의 값을 0으로 변경 후 계산, 받지않는 사원

// 10. 2001년 이후 입사한 사원 삭제
delete from employ where hiredate >= '2001/01/01';


#DDL
DDL(DATA DEFINITION LANGUAGE) : 데이터 정의어, 자동 커밋을 가지고 있다.
사용자 계정, 테이블, 인덱스, 뷰 등등 데이터 이상급의 설정에 대해 생성, 삭제, 변경을 할 수 있는 언어(=명령문)
	- 생성 : CREATE 
	사용자계정 : CREATE USER 사용자계정명 IDENTIFIED BY 비밀번호;
	테이블생성 형식)
		- 정식형식 : CREATE TABLE 테이블명(컬럼명1 자료형 [제약조건들...], 컬럼명2 자료형 [제약조건들...],....);
		- 복사형식 : (다른 테이블을 복사해서 만드는 형식) CREATE TABLE 테이블명 AS SELECT * FROM [스키마명.] 테이블명;
		** 스키마 (SCHEMA) : 데이터베이스의 전반적인 구조, 사용자계정명
			// 데이터베이스 전반적 구조 : 사용자계정정보, 제약조건, 테이블 구조, ...
	- 삭제 : DROP
	테이블 삭제 : DROP TABLE 테이블명 [CASCADE CONTRAINTS] [PURGE];
		// PURGE : 임시저장소까지 모두 삭제
	- 변경 : ALTER


-- 사원번호, 사원명, 급여 3개의 칼럼으로 구성된 EMP01 테이블 생성
create table emp01(empno number(4), ename varchar2(10char), sal number(7,2));

#자료형 
자료형 : 데이터타입, 컬럼(속성)에 들어갈 데이터의 유형을 결정한다.

	- 문자형 
	// 오라클은 한 글자도 문자열로 받아들임. 
	// 15 CHAR 작성 시 최대 15자까지로 범위 설정
	CHAR(크기[BYTE] | CHAR) (고정형 문자 자료형) : 1 ~ 2000BYTE
	VARCHAR2(크기[BYTE] | CHAR) (가변형 문자 자료형) : 1 ~ 4000BYTE
	LONG : 가변형 문자 자료형 : 최대 2GB까지 표현 가능(권장하지 않음. 이전버전과의 호환성을 위해 유지)

	- 숫자형 - 정수, 실수 포함
	NUMBER : 부동 소수점 자리수 숫자형
	NUMBER(정수값자리수) : 정수값의 자리 수를 지정
	NUMBER(소수점 제외 총 자리수, 소수점 자리수) : 정수값(총 자리수 - 소수점 자리수). 지정한 소수점 자리수 (초과된 소수점은 반올림으로 처리됨)

	- 날짜형
	DATE : 년/월/일 시:분:초 까지 입력 가능한 날짜형 자료형
	TIMESTAMP : 년/월/일 시:분:초.나노세컨드초 까지 입력 가능한 날짜형 자료형
	BIG DATA TYPE (LARGE OBJECT TYPE) // 옛 버전의 경우, DB에 파일 저장 시 이진코드로 변환해 저장했었기 때문에 존재함
	BLOB : BINARY LARGE OBJECT -> 이진데이터 전용 큰 사이즈를 기술할 수 있는 자료형(최대 1BYTE ~ 4GB까지 가능)
	CLOB : CHARACTER LARGE OBJECT -> 가변 길이 문자데이터 전용 큰 사이즈를 기술할 수 있는 자료형(최대 4GB ~ 1BYTE까지 가능)
	** 데이터 입력과 출력이 쉽지않아 사용을 권장하지 않는 자료형이다.

-- dept 테이블과 동일한 구조의 테이블을 dept01로 생성
create table dept01 as select * from dept;

sqlplus test 계정으로 접속 - 계정 확인 - 전체 테이블 확인 - 테이블 구조 확인 - emp 테이블 구조 확인
cmd창 - sqlplus test/1111 - show user; - select * from tab; - desc tab; - desc emp; 

** 명령어
데이터 삽입, 변경, 삭제 : insert, update, delete -> 자동커밋 X 
데이터 이상급의 생성, 변경, 삭제 : create, alter, drop -> 자동커밋 O

- 테이블의 구조 변경 (alter table 테이블명)
컬럼 추가(add), 수정(modify), 삭제(drop)
alter문 내 drop 명령어는 컬럼 삭제를 의미

	- 컬럼추가 
	[형식] : alter table 테이블명 add (컬럼명 데이터타입 [제약조건들], ...); **만약 추가하는 컬럼이 한 개인 경우는 소괄호 생략 가능

	- 기존 컬럼 수정
	[데이터 타입 변경조건] : 타입을 변경하는 경우는 반드시 데이터가 아무것도 존재하지 않아야 한다.
		- 해당 컬럼에 자료가 없는 경우 : 컬럼의 데이터타입과 크기 변경 가능
		- 해당 컬럼에 자료가 있는 경우 : 컬럼의 데이터타입은 변경할 수 없고, 크기는 늘릴 수 있다.(기존 크기보다 작은 크기로 변경 불가능)
	[형식] : alter table 테이블명 modify (컬럼명 데이터타입 [제약조건들], ...);

	- 컬럼 이름 변경
	[형식] : alter table 테이블명 rename column 변경해야하는컬럼명(기존컬럼명) to 변경할이름;

	- 기존 컬럼 삭제
	[한 개의 컬럼만 삭제하는 형식] : alter table 테이블명 drop column 컬럼명;
	[여러 개의 컬럼을 삭제하는 형식] : alter table 테이블명 drop (컬럼명, 컬럼명, ....);

#DQL
DQL : DATA QUERY LANGUAGE -> select
DML : DATA MANIPULATION LANGUAGE -> insert, update, delete
DDL : DATA DEFINITION LANGUAGE -> create, alter, drop

-- 서브쿼리 : 하나의 SQL 문에 포함되어 있는 또 다른 SQL문들을 지칭함. (메인쿼리와 서브쿼리의 관계가 존재)
-- 서브 쿼리를 이용하여 테이블의 구조뿐만 아니라 데이터까지 복사해 새로운 테이블 생성하거나 다른 테이블과의 임시적인 조인, 가상뷰 생성등을 처리할 수 있다.
create table emp01 as select * from emp;
create table emp02 as select * from emp  where depnto = 30;

// emp 테이블에서 empno, ename, deptno 컬럼을 조회하여 emp03 테이블 생성
create table emp03 as select empno, ename, deptno from emp;

// emp 테이블에서 empno, ename, deptno 컬럼 조회하여 emp04 테이블을 만드는데 컬럼명이 사번, 이름, 부서번호로 나오도록 생성
create table emp04 as select empno 사번, ename 이름, deptno 부서번호 from emp;

// emp 테이블에서 구조만 복사해오는 방법  : where절에 무조건 false를 반환하는 조건을 걸어준다.
create table emp05 as select * from emp where 1 = 0;

# RENAME (테이블명 변경)
	[형식]
	1.rename 기존테이블명 to 새로운 테이블명;
	2. alter 기존테이블명 rename to 새로운 테이블명;

#TRUNCATE TABLE (테이블의 모든 ROW를 제거)
	- DDL명령 중에 유일하게 데이터를 변경하는 명령문
	- 내용만 제거됨, 단 일부 내용 삭제는 불가, 모든 내용만 삭제 가능
	- 자동 commit되어 복구 불가
	- [구성]
	TRUNCATE TABLE 테이블명;
	- dept01 테이블의 모든 ROW를 제거(공간까지 제거)

#제약 조건 (CONSTRAINT) 
: 데이터의 결함을 최소화하기 위해 데이터에 조건을 걸어두는 것
	[형식]
	create table 테이블명(
	컬럼1 자료형 [제약조건1 제약조건2],
	컬럼2 자료형 [제약조건1 제약조건2],
	...
	컬럼n 자료형 [제약조건1 제약조건2]
	) 
	
	[종류]
	- NOT NULL : null 값 허용 불가(필수로 작성되어야 함) => 중복값 허용
	- UNIQUE : 중복 불가 => null값 허용
	- PRIMARY KEY(UNIQUE + NOT NULL) : 중복값 X, null값 X
		=> 유일한 값을 가지고 있는 컬럼에 적용하는 것이 좋은 제약 조건임.

	* 무결 : 결점이나 결함이 없는 상태
	1) 개체 무결성 (Entity integrity)
	모든 테이블이 기본 키 (primary key)로 선택된 필드(column)를 가져야한다. 기본 키로 선택된 필드는 고유한 값(Unique - 중복된 값을 허용안함)을 가져야하며, 빈 값(null)은 허용하지 않는다.
	- UNIQUE 제약 조건 또는 PRIMARY KEY 제약 조건을 설정하여 테이블의 기본 키나 식별자로 사용되는 열의 무결성을 강제하도록 한다. 
		(대표적 : PK(기본키, 주키), UNIQUE + NOT NULL)

	- 데이터 무결성
	* 데이터 무결성이란 데이터 베이스 내의 데이터에 대한 정확성, 일관성, 유효성, 신뢰성을 보장하기 위해 데이터 변경 혹은 수정 시 여러가지 제한을 두어 데이터의 정확성을 보증하는 것을 말한다. 관계형 관리시스템(RDBMS)에서는 설계 시 무결성을 고려한 설계로 데이터를 보호할 필요가 있다. 