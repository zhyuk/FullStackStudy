Pa - Cha 케이스
	부모클래스 내 변수, 메소드 외부접근 가능
	자식클래스 내 변수, 메소드 외부접근 불가능
	* 부모 자식 클래스에 동일한 이름의 변수, 메소드가 존재할 경우, 무조건 자식 클래스 내 변수, 메소드로 덮어씌워짐.


Cha - Cha 케이스 
	부모클래스 내 변수, 메소드 외부접근 가능
	자식클래스 내 변수, 메소드 외부접근 가능
	* 부모 자식 클래스에 동일한 이름의 변수, 메소드가 존재할 경우, 무조건 자식 클래스 내 변수, 메소드로 덮어씌워짐.



class Ch3 {} -> Ch(){}

숨어있는 기본 생성자는 public 클래스명(){}이기 때문에 숨어있는 기본생성자와 Ch(){}는 다름



오버라이드 될 때, 자식클래스의 접근제어자는 부모클래스의 접근제어자보다 작을 수 없다. 
ex) 
class Pa3 {
	public void display(){}
}

class Ch3 extends Pa3{
	void display(){} (X)
}



#super
super 키워드 : super 키워드를 포함하고 있는 클래스 복제본(=인스턴스=주소값)이 상속받은 부모 클래스 복제본(=인스턴스=주소값) -> 생성자 선언문, 메소드 선언문 안에 순서 상관없이 기술 가능
super([매개인자 값]) 생성자 호출문 : 부모의 생성자 호출문  -> 자식의 생성자 선언문의 가장 맨 첫번째 줄에만 기술 가능

#this
this 키워드 : this 키워드를 포함하고 있는 클래스 복제본 (=인스턴스=주소값) -> 생성자 선언문, 메소드 선언문 안에 순서 상관없이 기술 가능
this([매개인자 값]) 생성자 호출문 : this안의 다른 생성자를 호출할 때 사용 -> 생성자 선언문의 가장 맨 첫 번째 줄에만 기술 가능

super 키워드, this 키워드 : static 메소드 선언문에 사용 불가. -> static은 인스턴스하지 않고 공유 공간을 할당하기 때문에

상속관계가 존재하는 자식클래스의 생성자 가장 첫번째에는 아무것도 기술하지 않으면(생성자 호출문이 존재하지 않으면) 기본적으로 super() 생성자 호출문이 숨겨져 있다. -> 부모의 기본생성자는 자동으로 호출된다. 