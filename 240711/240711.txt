# 셀프 조인 (self join)
	: 동일한 테이블을 합쳐서 데이터를 추출하는 조인 방법
	* 조건의 값이 null값이 아닌 경우에만 조인된다.
	
# OUTER JOIN
	: 2개 이상의 테이블이 조인될 때 어느 한쪽 테이블엔 데이터가 존재하는데, 다른 쪽 테이블에는 데이터가 존재하지 않는 경우에, 데이터가 누락되는 문제를 해결하기 위해 사용되는 조인기법임. (해당 값이 없는 컬럼은 NULL 처리함)
	아우터연산자 : (+) => 위치 : 데이터가 없는 테이블쪽에 기술할 것

	1. LEFT OUTER JOIN : FROM절의 테이블에 해당되는 값을 모두 표현하고, 그 뒤에 JOIN절에 해당하는 테이블의 값을 표현하는 방식
		[형식]
		// LEFT OUTER JOIN 방식
		select 컬럼,.... from 왼쪽테이블, 오른쪽테이블 where 왼쪽테이블컬럼명 = 오른쪽테이블컬럼명(+);

		// ANSI LEFT OUTER JOIN 방식
		select 컬럼,... from 왼쪽테이블 left outer join 오른쪽테이블 on 왼쪽테이블컬럼명 = 오른쪽테이블컬럼명; 
	
	2. RIGHT OUTER JOIN : JOIN절에 해당하는 테이블의 값을 모두 표현하고, 그 뒤에 FROM절의 테이블에 해당되는 값을 표현하는 방식
		[형식]
		// RIGHT OUTER JOIN 방식
		select 컬럼,... from 왼쪽테이블, 오른쪽테이블 where 왼쪽테이블컬럼명(+) = 오른쪽테이블컬럼명; 
		// ANSI RIGHT OUTER JOIN 방식
		select 컬럼,... from 왼쪽테이블 right outer join 오른쪽테이블 on 왼쪽테이블컬럼명 = 오른쪽테이블컬럼명; 

	3. FULL OUTER JOIN : 조인할 두 테이블의 값을 모두 표현하고, 해당 값이 없는 컬럼은 NULL 처리함. (ANSI JOIN만 가능, 아우터연산자 사용 불가) 
		[형식]
		// ANSI FULL OUTER JOIN 방식
		select 컬럼,... from 왼쪽테이블 full outer join 오른쪽테이블 on 왼쪽테이블컬럼명 = 오른쪽테이블컬럼명;

#VIEW (가상테이블)
	- 테이블과는 달리 데이터 저장 공간이 없으며, 쿼리문을 저장하고 있는 객체
	- 뷰는 실제 자료를 갖지는 않지만, 뷰를 통해 테이블을 관리할 수 있다.
	- 하나의 테이블에 뷰의 개수는 제한이 없다.

	[명명규칙] - 권장사항
	- 이름만보고도 어떤 테이블을 가지고 만들었는지 알 수 있도록 view_테이블명 혹은 테이블명_view로 작명
==============================
	* 뷰 성격에 따른 가능 범위
	- 단순뷰 (SIMPLE VIEW) : VIEW를 생성할 서브쿼리에 조인 조건없이 1개의 테이블로 만들어지는 간단한 VIEW.
		하나의 TABLE에서 데이터를 추출하며 함수를 사용하지 않는다.
		DML(INSERT, UPDATE, DELETE) 사용 가능
	=> 1:1로 명확하게 연결되어 있어 원본의 컬럼에 접근할 수 있다.  따라서 뷰 이름을 가지고도 원본 수정이 가능 

 	- 복합뷰 (COMPLEX VIEW) : 여러 개의 테이블이 조인되어 생성되는 것. 하나 이상의 TABLE에서 데이터를 추출하며 함수(GROUP BY, HAVING과 같은 함수)를 사용한다.
		DML(INSERT, UPDATE, DELETE) 사용 불가능
	=> 1:n이기 때문에 컬럼에 접근해도 어느 테이블의 컬럼에 접근하는지 알 수 없어 원본 수정이 불가능. 원본 읽기만 가능
	
	- 인라인뷰 (INLINE VIEW) : 여러 번 사용할 필요없이 1회만 필요한 VIEW일 경우 SQL명령문의 FROM절에 VIEW의 서브쿼리 부분을 바로 적어주면 되며 이런 일회용 VIEW를 말함.
	=> 서브쿼리로 당시에 필요한 데이터만 가져오는 것을 의미한다. (쿼리문조차도 저장하지 않음)
=================================
	- [생성 형식](Syntax)
	CREATE VIEW 뷰이름 AS SELECT 서브쿼리;

	* 뷰 삭제 및 변경
	- 뷰는 실체가 없는 가상 테이블이기 때문에 수정이 불가능하다.(삭제 후 재생성 가능)
	- 뷰를 삭제한다는 것은 데이터 딕셔너리에 저장되어 있는 뷰의 정의를 삭제하는 것을 의미
	- [형식] DROP VIEW 뷰이름;


#세미조인, 안티조인
	- 세미조인(SEMI-JOIN) : 두 개의 A, B 테이블을 조인하는 경우 B테이블의 데이터가 A 테이블에 존재하거나 포함되는 경우를 추출하는 조인 방식
	IN, EXISTS 연산자를 이용해 서브쿼리에 있는 데이터에 대해서만 메인쿼리에서 추출하는 조인 방법
	
	- 안티조인(ANTI-JOIN) : 두 개의 A, B 테이블을 조인하는 경우 B테이블의 데이터가 A 테이블에 존재하지 않거나 포함되지 않는 경우를 추출하는 조인 방식
	NOT IN, NOT EXISTS 연산자를 이용해 서브쿼리에 없는 데이터만 메인쿼리에서 추출하는 조인 방법


=======================
customers 테이블 복사하는 방법)
1. 공유폴더 expall.dmp 다운로드
2. 다운로드 폴더 내 expall.dmp 파일 유뮤 확인
3. cmd 실행
4. 명령어 입력 : imp userid=test/1111@XE tables=customers file=C:\Users\hi\Downloads\expall.dmp fromuser=ora_user touser=test
5. sql developer 확인


# 인덱스 (INDEX)
	- 데이터베이스 테이블에 있는 데이터를 빨리 찾기 위한 용도의 데이터베이스 객체
	- 일종의 색인기술 (목차)
	- 테이블에 index를 생성하게 되면 index Table을 생성해 관리한다.
	- 인덱스는 테이블에 있는 하나이상의 컬럼으로 만들  수 있다.
	- 가장 일반적인 B-tree(binary Search Tree) 인덱스는 인덱스 키(인덱스로 만들 테이블의 컬럼값)와 이 키에 해당하는 컬럼 값을 가진 테이블의 로우가 저장된 주소 값으로 구성됩니다.
	- 인덱스는 1개 이상의 컬럼으로 생성할 수 있으며, 최대 32개의 컬럼까지 지정하여 생성할 수 있다.
	- 2개 이상의 컬럼으로 생성된 인덱스를 복합 인덱스라고 부른다.
	- 테이블에 종속적이다.
	- ** 기본키 (주 키 = primary key), 유일키(unique) 생성 시 자동으로 인덱스 생성됨.

	[권장사항]
	- 테이블 당 5개 이하의 인덱스를 생성할 것

	* 인덱스를 사용해야 할 컬럼
	- where절이나 조인 조건에서 자주 사용되는 열에 생성. 단, 컬럼이나 값에 대한 가공이 없어야 한다.
		예: substr(deptno, 1, 2) = 10 (X) ==> substr(deptno, 1, 2)을 컬럼명으로 인식하게 됨. 
		deptno = 10 (O) 
	- 조회결과가 전체행의 5 ~ 15% 정도로 읽어들일 것으로 예상되는 컬럼. 
		단, 5 ~ 15%라도 데이터가 너무 많을 경우에는 인덱스를 사용해도 소용이 없을 수 있다. 
		그런 경우에는 다른 방법으로(페이징처리 등) 처리를 해주는 것이 좋다.
		=> 중복값이 5 ~ 15% 이내인 컬럼

	* 인덱스를 사용하지 말아야 할 컬럼 
	- 테이블에 데이터가 너무 적거나 또는 너무 많은 데이터가 있는 경우
	- where절에 자주 사용되지 않는 열은 사용되지 않는다.
	- 중복값이 많은 경우
	- 테이블이 자주 갱신될 때
	- 값에 null이 많은 컬럼

	* 인덱스 생성
	[형식](=문법 = Syntax)
	create index [계정명(=스키마명).]인덱스명 on [계정명.]테이블명(컬럼1,컬럼2,컬럼3,....);

	- 인덱스 재생성
	[형식](=문법 = Syntax)
	create index 인덱스명 on 테이블명(컬럼명, 컬럼명,...);
	-- 오라클은 alter index문을 사용해서 인덱스 컬럼 변경 불가.
	-- 인덱스의 컬럼을 추가, 제거 또는 순서를 변경하기 위해서는 인덱스를 삭제(drop)하고 다시 생성(create) 해야 한다.

	- 인덱스 삭제(인덱스 컬럼 수정/변경/제거는 삭제 후 재생성으로 가능)
	[형식](=문법 = Syntax)
	drop index 인덱스명
	
	* 수정형식
	-- 인덱스명 변경(인덱스명만 변경가능, 컬럼 추가, 삭제, 변경 불가)
	[형식](=문법 = Syntax)
	alter index 기존인덱스명 rename to 변경인덱스명;

	- 인덱스 리빌드 : 인덱스 속도가 저하되었거나, 깨졌을 경우
	[형식](=문법 = Syntax)
	alter index 인덱스명 rebuild;
	==> 인덱스의 값이 수정되어 오름차순에 맞춰 재배치되다가 충돌이 나 에러가 출력되거나 출력되는 속도가 느려진 경우 사용.


=============================
SQL Developer 접속 시 오류뜨는 거
1. 작업관리자 실행
2. 백그라운드 프로세스 내 sqldeveloper 확인 후 제거
3. C:\Users\hi\AppData\Roaming 내 SQL Developer 제거