#익명클래스 = 중첩클래스
- Inner class로, 이름이 없는 클래스를 말한다.
- 클래스 정의와 동시에 객체를 생성할 수 있다.

- Interface, AbstractClass 모두 익명 클래스로 객체를 만들 수 있다.
: 부모 클래스의 이름이나 구현하고자 하는 인터페이스의 이름을 사용해서 정의하기 때문에 하나의 클래스로 상속받는 동시에 인터페이스를 구현하거나 둘 이상의 인터페이를 구현할 수 없다. 오로지 단 하나의 클래스를 상속받거나 단 하나의 인터페이스만을 구현할 수 있다.

- 이름이 없기 때문에 생성자도 가질 수 없다.
- 인터페이스와 추상 클래스 내부의 모든 추상 메소드를 반드시 오버라이딩 해야 함
- 마지막 }(종료중괄호) 뒤에 종료 ;(세미콜론)을 꼭 넣어준다.
- 외부에서 익명클래스의 멤버필드에는 접근 불가

- 익명클래스 내부에 기술가능한 static의 경우 
	1. static final로 선언한 상수(일반 변수 static은 불가)
	2. 외부 변수는 Effectively final나 final만 가능하다.
	Effectively final : 외부에 일반 변수라도 값 변경이 전혀 안 된 변수

익명 클래스를 사용하는 이유 :
*프로그램 내에서 한 번만 객체로 만드는데 사용되는 클래스를 굳이 정의할 필요가 없기 때문*
AWT, SWING, GUI, 이벤트 처리에 쓰임
외부에서 익명클래스의 멤버필드에 접근이 안되므로, 클래스 안에서 모두 처리되어야하는 경우만 익명클래스를 사용한다.

형식 :
new 부모클래스이름(){
	// 멤버필드, 메소드 기술
}

// 다른방법
new 구현인터페이스이름(){
	// 멤버필드, 메소드 기술
}

ex) String str = new String(){
	// 익명클래스
};

#람다식 함수
1. 이름없는 함수
2. 함수의 구현과 호출만으로 프로그램을 만들 수 있는 방식이다.
3. 인터페이스만 이용 가능
4. 외부에 정의된 변수를 참조할 때, final 또는 Effectively  final 변수를 참조만 가능하다.
5. 함수 내부에서 외부 변수를 참조할 때는 static 변수는 불가
6. 함수 내부에서 지역변수 선언시에도 static 불가, final, 일반 변수만 가능
7. 인터페이스 메소드를 참조하여 만들 경우 해당 인터페이스 내부에는 메소드가 한 개만 선언되어 있어야 한다. 여러 개인 경우 에러
8. 람다식 메소드 호출되면 익명클래스가 자동으로 생성된다.(눈에는 보이지 않음)

9. 마지막 } (종료중괄호) 뒤에 종료 ; (세미콜론)을 꼭 넣어준다.
10. 자바 8버전부터 지원됨

문법 
(매개변수 목록) -> { 함수몸체 } (실행코드가 1개일 경우 중괄호는 생략가능)

public void md(){
	실행코드;
}

#선언형식
// 클래스 선언형식
[접근제어자 - public / default] [기타제어자 - anstract, final] class 클래스명 {
	//멤버필드 선언형식
	[접근제어자 - ppdp] [기타제어자 - final, static] 자료형 멤버필드명;

	// 생성자 선언형식
	[접근제어자 - ppdp] 클래스명([매개변수 선언문, ... ){ ... }

	// 메소드 선언형식
	[접근제어자 - ppdp] [기타제어자 - static, final, abstract] 리턴타입 메소드명 ([매개변수 선언문, ... ]){ ... }

	// 이너클래스 = 중첩클래스 = 내부클래스 선언형식
	[접근제어자 - ppdp] [기타제어자 - static, final] class 클래스명 {
		//멤버필드, 생성자, 메소드 등등...;
	}

}

#로또
HashSet, Integer[ ], arraycopy, sort 사용

#공부
클래스 선언, 메소드 선언, 객체 선언 및 사용 / 조건문 / 반복문 / 컬렉션 프레임워크(ArrayList, Map, Set) / 예외처리 / 랩퍼클래스와 패키지 -> 알아두기만