# 나눗셈
    - a / b: a를 b로 나누고 그 나눗셈의 몫을 반환
    - a % b: a를 b로 나누고 그 나눗셈의 나머지를 반환
    * 정수값 / 정수값인 경우에도 필요에 따라 실수값으로 출력될 수 있다. => js는 자료형의 제한이 없고 값에 따라 자료형이 정해지기 때문에

# 동치연산자
    - ==(일치연산자, 동등연산자) : 자료형은 보지않고 값만 비교 (자료형을 아예 보지않는 것은 아니고 눈에는 보이지 않지만 강제적으로 형 변환을 진행한 후 값을 비교하기 때문에 값만 비교하는 것처럼 보이게 된다.)
    - ===(완전동치연산자) : 자료형과 값 모두 비교

    * 예시
    var a = 10;
    var b = "10";
    var result;

    result = a == b;
    console.log(result); // true
    // a b 모두 값이 10이므로 true 

    result = a === b;
    console.log(result); // false
    // a는 숫자형, b는 문자형이므로 서로 다르다. 따라서 false 출력

# 일반동치연산자를 사용하는 경우 true,false의 범위
    * 일반동치연산자(==) : false = 0, true = 1까지 인정

# Boolean을 이용하는 경우 true,false의 범위
    * 존재하지 않는 의미를 가진 값은 false를 반환. => "", '', 0, null, undefined
    예시) Boolean('') / Boolean("") / Boolean(0) / Boolean(undefined) => false

    * 존재하는 값은 true를 반환 => 위의 값을 제외한 나머지 값은 true값 반환
    예시) Boolean("abc) / Boolean(5) => true

# !(부정연산자)를 사용하는 경우 true,false의 범위
    * 존재하지 않는 의미를 가진 값을 모두 false로 인식 => !""인 경우 ""가 존재하지 않는 값이므로 false 인식. 즉, !false를 의미(반환되는 값은 true)
    * 존재하는 값은 모두 true로 인식 => !"wow"/ !2 등 존재하는 값이므로 true 인식. 즉, !true를 의미(반환되는 값은 false)


# 조건문
    * if(){} / if(){} else{} / if(){} else if(){} else{}
    * switch(조건값) {
        case 경우값: ... [break;]
        default: ...;
    }
