클래스 생성(src/main/java 내 .java파일) => 객체 생성(bean => <bean>태그) => 빈 설정 파일 (Spring Bean Configuration File) (src/main/resources 내 .xml 파일)

#Spring 

	스프링 빈 설정파일에서 객체를 생성하는 방법 (bean 태그 이용)

	* bean 태그의 속성
	id => 객체명을 기술 (자바의 식별자 명명규칙을 그대로 적용 = 권장)
	name => 객체명을 기술 (자바의 식별자 명명규칙을 따르지 않는다) -> 조금 더 유연한 이름으로 사용가능 (특수문자 기호들을 좀 더 유연하게 사용가능하다)

	[자바의 객체명 명명규칙]
	되도록 영어 소문자로 시작. 
	카멜기법이나 스네이크기법(카멜기법 권장)
	특수문자는 _ $만 사용가능.
	공백이 올 수 없다.
	첫 글자는 숫자를 사용할 수 없다.

	class => 객체의 자료형(데이터 타입)을 기술 -> 패키지까지 모두 작성해줘야함.
	scope => singleton(기본값), prototype. 기본값이 존재하기 때문에 생략가능
		singleton : 객체를 한 개만 생성하도록 강제하는 패턴
		prototype : 객체를 요청할 때마다 new로 새롭게 생성하도록 하는 패턴
	* scope 속성이 prototype으로 설정되면 자동으로 게으른 로딩방식으로 설정된다.

	lazy-init  => 객체를 생성하는 시점을 정의하는 속성. true, false(기본값)
		true(게으른 로딩 : lazy-loading) : 객체를 요청할 때 생성함 (속도 느림, 메모리 부하가 적음)
		false(즉시로딩 : pre-loading) : 객체를 미리 생성해놓음. (속도 빠름, 메모리 부하가 많음)
	
	init-method => 빈 객체 생성 시 초기 메소드를 설정하는 속성 [예시] init-method="initSamsung" // 생성되는 동시에 initSamsung() 메소드 실행
	destroy-method => 빈 객체 생성 시 소멸 전 메소드를 설정하는 속성 [예시]destroy-method="destroySamsung" // 소멸되기 전 destroySamsung() 메소드 실행
	


# 스프링 컨테이너(xml)
	
	- GenericXmlApplicationContext
	 * xml 기반의 스프링 컨테이너를 구동시키는 기능을 하는 클래스
	 * 컨테이너 안에 스프링 빈 설정파일에 기술되어 있는 로직을 읽어서 객체를 생성한 후 저장해둠.
	 * 기본 경로 : src/main/resources/(classpath:) 폴더 경로까지 자동으로 가지고 있음.


# 어노테이션

	어노테이션을 기술하는 위치 : 클래스 위, 메소드 위, 매개변수 앞
	
	@Configuration : 클래스 위에 기술 => 해당 어노테이션이 붙은 클래스는 스프링 빈 설정 파일로 사용된다.
	@Bean : 메소드 위에 기술 => 해당 어노테이션이 붙은 메소드는 객체로 생성된다. 객체명은 메소드명이 자동으로 처리된다.


# 스프링 빈 설정파일
	
	- 스프링 빈 설정파일 유기적으로 연결하기 
	1. GenericXmlApplicationContext("스프링빈 설정파일1", "스프링빈 설정파일2");를 선언할 때 매개인자로 해당 Spring Bean Configuration file들을 ,(콤마)로 나열 => [예시] :  new GenericXmlApplicationContext("applicationContext.xml", "speaker/speakerContext.xml");
	2. 하나의 스프링 빈 설정파일에 연결하고자 하는 다른 스프링 빈 설정파일을 import 태그를 이용하여 연결 => [예시] : <import resource="classpath:speaker/speakerContext.xml"/> *classpath: => src/main/resources 까지의 경로를 가지고 있는 경로 alias임. (실행되면 해당 경로에 있는 파일들이 다른 위치로 이동하기 때문에 classpath: 를 사용하는 것이 좋다.)

	- 기본생성자로 객체 생성하기
	<bean id="객체명" class="패키지경로들.클래스명"/>

	- 객체타입 매개인자를 1개 가지고 있는 기타생성자로 객체 생성하기
	** ref 속성 : 매개인자의 값이 객체타입인 경우
	<bean id="객체명" class="패키지경로들.클래스명">
		<constructor-arg ref="bean태그로 설정한 객체명"/>
	</bean>

	- 값을 입력받을 수 있는 매개인자를 1개 가지고 있는 기타생성자로 객체 생성하기
	** value 속성 : 매개인자로 문자열 값이나, 숫자값 등 주소값이 아닌 값을 바로 입력받을 때 사용하는 속성 (문자열 5000으로 입력되나 자료형이 자동으로 형 변환됨, 매개인자가 문자열인 경우는 문자열 값으로 받을 수 있다.)
	<bean id="객체명" class="패키지경로들.클래스명">
		<constructor-arg value="5000"/>
	</bean>

	----- 생성자가 아래와 같이 선언된 경우
	public Samsung(Speaker speaker, int price){...}

	<!-- sony 객체 : Speaker 인터페이스를 상속받은 SonySpeaker 자료형 객체 -->
	<bean id="sony" class="com.springbook.biz.SonySpeaker"/>

	-- 매개인자가 2개이고, 자료형이 일치하는 기타 생성자가 단 하나만 존재하는 경우는 constructor-arg 선언의 순서가 int, Speaker 순으로 되어도 자동으로 맵핑처리가 됨.
	<bean id="stv" class="com.springbook.biz.Samsung">
		<!-- 첫번째는 Speaker 자료형의 객체타입 변수(ref 속성) -->
		<constructor-arg ref="sony"/>
		<!-- 두번째는 int 자료형의 값타입 변수(value 속성) -->
		<constructor-arg value="250000"/>
	</bean>

	-- 매개인자가 2개이고, 자료형이 일치하는 기타 생성자가 단 하나만 존재하더라도 반드시 constructor-arg 선언의 순서가 index속성에 설정한 순서에 맞도록 Speaker, int 순으로 되어야 함.
	<bean id="stv" class="com.springbook.biz.Samsung">
		<!-- 첫번째는 Speaker 자료형의 객체타입 변수(ref 속성) -->
		<constructor-arg index="0" ref="sony"/>
		<!-- 두번째는 int 자료형의 값타입 변수(value 속성) -->
		<constructor-arg index="1" value="250000"/>
	</bean>

# two 프로젝트의 com.springbook.setter 패키지

	AbstractApplicationContext factory = new GenericXmlApplicationContext("applicationContext1.xml"); 
	new GenericXmlApplicationContext("applicationContext1.xml"); => 스프링 컨테이너를 구동시킨다. => applicationContext1.xml (스프링 빈 설정파일)에 설정된 객체 생성 및 주입(생성자 주입, setter 주입 등)을 처리
	=====================================================================================================================
	* 위의 AbstractApplicationContext factory = new GenericXmlApplicationContext("applicationContext1.xml");  1줄이 처리한 내용
	컨테이너 객체 : factory

	* 객체
	1. apple => 자료형 (AppleSpeaker, Speaker) / 즉시로딩 / 싱글톤
	2. tv => 자료형 (Samsung, TV) / 즉시로딩 / 싱글톤 / setter 주입 완료 => speaker 멤버필드 => apple, price 멤버필드 => 1500000
	3. sony => 자료형 (SonySpeaker, Speaker) / 즉시로딩 / 싱글톤
	=====================================================================================================================

	* applicationContext1.xml
	// (Samsung, TV) 자료형을 가진 tv 객체 생성
	// property name="price" => Samsung클래스의 setPrice() 메소드 호출, 매개인자값으로 1500000을 주입함.
	// 따라서 setPrice(1500000) 호출문을 태그 형식으로 기술한 것임.

	// property name="speaker" => Samsung클래스의 setSpeaker() 메소드 호출, 매개인자로 apple 객체를 주입함.
	// 따라서 setSpeaker(apple) 호출문을 태그 형식으로 기술한 것임.
	<bean id="tv" class="com.springbook.setter.Samsung">
		<property name="price" value="1500000"/>
		<property name="speaker" ref="apple"/>
	</bean> 

# 객체생성 관련 어노테이션 종류 (클래스 위에 기술해야 한다.)
	1. @Component 또는 @Component("객체명")
	2. @Service 또는 @Service("객체명") : 서비스 클래스에 붙이는 어노테이션
	3. @Repository 또는 @Repository("객체명") : DAO 클래스에 붙이는 어노테이션
	4. @Controller

	=> 객체명 미기술 시 클래스명 소문자처리된 것이 객체명
	=> 객체생성 관련 어노테이션은 반드시 스프링 빈 설정파일에서 해당 어노테이션을 활성화해줘야만 사용 가능함.
	=> 활성화방법 : <context:component-scan base-package="패키지경로"/>

# 객체 자동주입 (의존성 주입 = Dependency Injection = DI) => 생성자, setter 포함 메소드, 멤버필드 등 데이터의 주입이 필요한 대상들에 데이터를 주입하는데, 개발자가 처리하는 것이 아닌 컨테이너에 의존하여 스프링 컨테이너가 자동으로 객체 주입을 하도록 처리하는 방식

	* 의존성 주입에 관련된 어노테이션
	=> 반드시 어노테이션으로 객체 생성이 되어 있어야만 의존성 주입 어노테이션이 활성화된다.

	[객체예시]
	1. tv => 자료형 (Samsung, TV) / 즉시로딩 / 싱글톤 
	2. apple => 자료형 (AppleSpeaker, Speaker) / 즉시로딩 / 싱글톤
	3. sony => 자료형 (SonySpeaker, Speaker) / 즉시로딩 / 싱글톤

	- byType 방식(= 자료형 주입) : 컨테이너에 있는 객체 중 자료형을 찾아서 주입하는 방식
	@Autowired
	@Resource
	@Inject

	- byName 방식(= 객체명 주입) : 컨테이너에 있는 객체 중 객체명을 찾아서 주입하는 방식
	@Autowired @Qualifier("객체명") [권장]
	@Inject @Qualifier("객체명") [권장X]
	@Resource(name="객체명")
	@Inject @Named("객체명") [권장]
	@Autowired @Named("객체명") [권장X]



	[예시] 
	@Autowired @Qualifier("sony")
	private Speaker speaker; => sony 객체로 초기화됨.

	@Autowired : 2. apple => 자료형 (AppleSpeaker, Speaker) / 즉시로딩 / 싱글톤 / 3. sony => 자료형 (SonySpeaker, Speaker) / 즉시로딩 / 싱글톤
	@Qualifier("sony") : 3. sony => 자료형 (SonySpeaker, Speaker) / 즉시로딩 / 싱글톤
