#DB url
	* 오라클 : jdbc:oracle:버전:@호스트:포트번호:SID
	* 마리아DB : jdbc:mariadb://호스트:포트번호/SID -> SID는 생성한 DB명을 작성. 포트번호는 3306(MySQL도 동일)

# MariaDB

	[select문 형식]
	select 컬럼절 -- 5
	from 테이블절 -- 1
	where 조건절 -- 2
	group by 그룹컬럼절 -- 3
	having 그룹조건절 -- 4
	order by 정렬 -- 6
	limit 가져올 목록개수 -- 7(페이징 처리)
	또는
	limit 건너뛸 숫자값, 가져올 목록개수 -- 7(페이징 처리)
	또는
	-> 예: limit 5,5 -> 5번까지 건너뛰고 6번부터 5개 가져옴.
	limit 가져올 목록개수offset 건너뛸 숫자값 -- 7(페이징 처리)

	[insert문 형식]
	정식형식 : insert into 테이블명 (컬럼, 컬럼, ...) values(값, 값, ...);
	단축형식 : insert into 테이블명 values(테이블이 가지고 있는 컬럼의 순서, 개수, 자료형 모두 일치시키도록 값 지정);

	[update문 형식]
	update 테이블명 set 컬럼명 = 변경할 값, 컬럼명 = 변경할 값, ... where 조건절;

	[delete문 형식]
	delete from 테이블명 where 조건절;

	** 오라클에서는 dml명령문의 값으로 서브쿼리를 이용하여 값지정이 가능하나, 마리아DB에서는 서브쿼리를 이용하여 값 지정을 할 수 없다.
	** 마리아DB는 기본값이 오토커밋임. 각각 커밋해주지 않아도 적용.


# auto_increment 제약조건
	: 컬럼의 값을 1씩 자동 증가시키는 제약조건(오라클의 시퀀스와 유사한 기능을 제공한다.) 테이블에 종속적이다.
	
	auto_increment 컬럼 안의 최대값을 인식하여 그 값에서 1을 더한 값을 가지고 있다. 따라서 사용할 컬럼에 어떠한 값도 입력하지 않아야 한다.
	-> auto_increment 값을 이용하여 값을 insert 하려면 단축형식의 insert 명령문은 절대 사용할 수 없다.
	[예시] : auto_increment가 적용된 컬럼명이 id(pk,정수값)인 경우 -> insert into student (name, address, gender) values ('테스트', '강원', '여성');


	[필수조건]
	- auto_increment 제약조건은 한 테이블 당 한 개의 컬럼만 사용 가능
	- 컬럼의 자료형이 정수값이어야 한다.
	- 해당 컬럼이 반드시 primary key 또는 unique여야 한다.
	- 반드시 컬럼레벨 방식으로만 구현이 가능하다.(복합키에는 적용 불가) 

	[현재 테이블의 auto_increment가 가지고 있는 값을 확인하는 방법]
	show table status where name = '테이블명';

	[auto_increment 값을 초기화하는 방법]
	alter table 테이블명 auto_increment = 설정할 값;
	단, 설정할 값이 해당 컬럼의 MAX값보다 작을 경우, 적용되지 않는다.

# Spring
	[스프링 프레임워크/부트 차이]
	* 스프링 부트 : 스프링 프레임워크 기반으로 사용되는 기술
 	* 스프링 프레임워크 : 자바 기반의 경량 프레임워크(개발에 필요한 전반적인 구조를 제공해주는 것을 프레임워크라고 함.)

	=> 컨테이너 : 객체 생성, 객체 주입, 객체간 상호 연결에 대한 전반적인 처리등을 자동화해주고, presentation Layer(뷰 - 사용자에 관련된 부분)와 buisness Layer(백앤드 - 데이터베이스 연결이나 dao, dto, svc 등등의 back-end 관련된 부분)를 유기적으로 연결해주는 기능 등 기존 개발자들이 하던 일을 자동으로 알아서 처리하도록 지시하는 기능을 제공.

	- 객체 생성 : 클래스를 이용하여 내가 필요한 대상을 만드는 작업. 예) String str = new String(); => 컨테이너에서 처리
	- 객체 주입(injection)
	예) 
	Student st = new Student();
	StudentDao dao = new StudentDao(Student st); // dao 객체를 생성할 때 매개변수로 st 객체를 넣는 것이 "객체 주입"
	
	class StudentDao {
		private Student st;
		StudentDao(Student st){
			this.st = st;
		}
	}
	
	- 외부 라이브러리 주입 (= Dependency 이용)
	- 연결된 외부 라이브러리 자동 검색 (= Dependency Lookup : 의존성 검색)

	=> 의존성 주입(Dependency Injection = DI) : 필요한 라이브러리나 객체 등을 개발자가 직접 구현하지 않고, 스프링 컨테이너를 통해 자동으로 필요한 데이터들을 주입하는(받는) 방식
	* 의존성(=Dependency) : 개발자가 하던 일을 컨테이너에서 자동으로 처리하게끔 하는 것


	객체 : bean (SpringBean), Component, Command (VO클래스에 자동 주입처리되는 객체)

	[스프링으로 프로젝트를 생성]
	Project Object Model => pom.xml : 프로젝트에 관련된 모든 객체들을 모아둔 모델. (= 프로젝트 형상관리 파일)
	
	** 형상관리 : 버전(문서, 파일, 라이브러리 등) 관리
	[형상관리 방식]
	1. Maven(메이븐) : 형상관리를 xml 기반(markup 태그 방식으로 기술)의 파일로 관리하는 방식 (형상관리 파일명 : pom.xml)
	2. Gradle(그래들) : 형상관리를 .gradle 기반(json 방식으로 기술)의 파일로 관리하는 방식 (형상관리 파일명 : build.gradle)
	

	* 자바만으로 프로젝트를 생성할 때 
	1. 우측 상단의 perspective 모드를 java로 변경
	2. File - New - java Project

	* JSP 프로젝트를 생성할 때
	1. 우측 상단의 perspective 모드를 JavaEE로 변경
	2. File - New - Dynamic Web Project

	* spring Framework 프로젝트 생성할 때
	1. 우측 상단의 perspective 모드를 spring으로 변경
	2. 방법 2가지
		2-1. File - New - Spring Legacy Project (템플릿: SpringMVC 선택) (** 반드시 SpringMVC 탬플릿 추가 후 가능 **)
		[SpringMVC 템플릿 추가방법]
		C:\swork\.metadata\.plugins\org.springsource.ide.eclipse.commons.content.core에 https-content.xml 파일 복사
		2-2. File - New - Dynamic Web Project로 생성 후 생성된 프로젝트명 우클릭 configuration 선택 - convert Maven Project


	* spring Framework 프로젝트 생성 시 순서
	1. 라이브러리 추가 => pom.xml 파일에 dependencies 태그 안에 dependency 태그 추가
	2. .java 파일 생성 => src/main/java 폴더 안에 필요한 패키지와 자바파일 생성
	3. .css, .js, .html, .jsp, 이미지 등 필요한 파일 기술 => src/main/webapp 폴더 안에 필요한 파일들로 생성 및 추가 => src/main/webapp 폴더 안(외부접근 가능) 또는 src/main/webapp/WEB-INF 폴더 안 (보안강화. 외부접근 불가)
	3-1. database에 관련된 정보를 .properties 파일 생성 및 추가 => src/main/resources
	3-2. 스프링 빈 설정파일 생성 및 추가 => src/main/resources 또는 srrrc/main/webapp/WEB-INF 폴더 안
	4. web.xml에 필요한 태그들 기술
	* 3과 3-1의 순서 또는 3과 3-2의 순서는 상관없으나, 3-1과 3-2의 순서는 꼭 지켜야 함. (스프링 빈 파일에 데이터베이스 관련 정보가 작성될 경우 3-1부터 작성)



============================================================================
[쿼리문]

create table student(
id int not null,
name varchar(10) not null,
gender enum('남자','여자') not null,
address varchar(50) not null,
birthday date not null,
primary key(id)
) default charset=utf8;

insert into student values(1, '홍길동', '남자', '서울', '1999-10-26');
insert into student values(2, '황진이', '여자', '경기', '1991-12-31');
insert into student values(3, '전우치', '남자', '인천', '1989-2-10');
insert into student values(4, '강백호', '남자', '강원', '1995-11-4');
insert into student values(5, '나엄지', '여자', '충남', '1982-11-16');
insert into student values(6, '설까치', '남자', '경북', '1997-10-1');
insert into student values(7, '추사랑', '여자', '전남', '1985-1-1');
insert into student values(8, '삼둥이', '남자', '제주', '1981-2-3');
insert into student values(9, '테스트', '남자', '제주', '1981-2-3');
insert into student values(10, '테스트', '남자', '제주', '1981-2-3');
insert into student values(11, '테스트', '남자', '제주', '1981-2-3');
insert into student values(12, '테스트', '남자', '제주', '1981-2-3');
insert into student values(13, '테스트', '남자', '제주', '1981-2-3');
insert into student values(14, '테스트', '남자', '제주', '1981-2-3');
insert into student values(15, '테스트', '남자', '제주', '1981-2-3');
insert into student values(16, '테스트', '남자', '제주', '1981-2-3');
insert into student values(17, '테스트', '남자', '제주', '1981-2-3');
insert into student values(18, '테스트', '남자', '제주', '1981-2-3');
insert into student values(19, '테스트', '남자', '제주', '1981-2-3');
insert into student values(20, '테스트', '남자', '제주', '1981-2-3');

drop table student; 

create table student (
id int auto_increment primary key,
name varchar(10) not null,
gender enum('남자', '여자') not null,
address varchar(50) not null,
birthday date not null
) default charset=utf8;


insert into student values(1, '홍길동', '남자', '서울', '1999-10-26');
insert into student (name, gender, address, birthday) values('황진이', '여자', '경기', '1991-12-31');
insert into student (id, name, gender, address, birthday) values(5, '전우치', '남자', '인천', '1989-2-10');
insert into student (name, gender, address, birthday) values('강백호', '남자', '강원', '1995-11-4');

[연습문제]
-- student 테이블에서 주소를 모두 서울로 수정하세요.
update student set address='서울';

-- 아이디가 1번인 사람의 이름을 고길동으로 변경하세요.
update student set name='고길동' where id = 1;

-- 아이디가 3번인 사람의 주소를 제주로, 생일을 2001년1월1일로 변경하세요.
update student set address='제주', birthday='2001-1-1' where id=3;

-- 아이디가 2번인 학생을 삭제하세요.
delete from student where id = 2;

-- student 테이블을 제거하세요.
drop table student;

-- student 테이블의 전체 데이터를 보여주세요.
select * from student;

-- 아이디가 3번인 학생의 데이터를 보여주세요.
select * from student where id = 3;

-- 남자면서 서울에 사는 학생의 이름, 성별, 주소를 보여주세요.
select name, gender, address from student where gender='남자' and address='서울';

-- 여자이거나 서울에 사는 학생의 이름, 성별, 주소를 보여주세요.
select name, gender, address from student where gender='여자' or address='서울';

-- 첫번째 목록만 가져오세요
select * from student limit 1;
select * from student limit 0, 1;

-- 첫번째부터 세번째 목록 가져오세요.
select * from student limit 3;
select * from student limit 0, 3;

-- 이름이 황진이인 목록만 가져오세요.
select * from student limit 1,1;
select * from student limit 1 offset 1;

-- 강백호부터 추사랑까지의 목록을 가져오세요.
select * from student limit 3,4;
select * from student limit 4 offset 3;

-- 전우치, 강백호 데이터를 auto_increment 값으로 적용되도록 insert 하세요.
insert into student (name, gender, address, birthday) values('전우치', '남자', '인천', '1989-2-10');
insert into student (name, gender, address, birthday) values('강백호', '남자', '강원', '1995-11-4');

-- 나엄지 데이터를 10번으로 적용되도록 insert 하세요.
insert into student values (10, '나엄지', '여자', '충남', '1982-11-16');

-- 설까치 데이터를 auto_increment값으로 적용(11번으로 적용)되도록 insert 하세요.
insert into student (name, gender, address, birthday) values('설까치', '남자', '경북', '1997-10-1');

-- 추사랑 데이터를 5번 데이터로 적용되도록 insert 하세요.
insert into student (id, name, gender, address, birthday) values(5, '추사랑', '여자', '전남', '1985-1-1');

-- 삼둥이 데이터를 6번 데이터로 적용되도록 insert 하세요.
insert into student (id, name, gender, address, birthday) values(6,'삼둥이', '남자', '제주', '1981-2-3');
