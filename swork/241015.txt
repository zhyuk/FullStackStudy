# 어노테이션
    @RequestMapping(value = "/insertBoard.do") => url 패턴이 일치하면 반드시 실행.
    @RequestMapping(value = "/login.do", method = RequestMethod.POST) => url 패턴이 일치해도, 데이터 전송방식이 post방식일 때만 실행.
    @RequestMapping(value={"/userList.do", "/myPage.do"}) => url 패턴 여러 개에 같은 로직을 실행하고싶은 경우, {}(중괄호)와 ,(콤마)를 사용하여 연결

    * @RequestParam(value = "searchCondition", defaultValue = "TITLE", required = false) String condition
    => value = "searchCondition" : Request 파라미터명이 searchCondition인 파라미터가 있으면 해당 파라미터의 값을 가져오고,
    defaultValue = "TITLE" : 초기값을 TITLE로 설정.

    * @ModelAttribute
    ModelAndView mav = new ModelAndView(); mav.addObject("key명", 값); 과 동일한 역할을 함.
    request.setAttribute("key명", 값);과 동일한 역할을 함.
    [예시] @ModelAttribute UserVO vo => request.setAttribute("userVO", vo);
    매개변수에 @ModelAttribute가 붙은 경우, 해당 메소드가 응답을 완료할 때까지만 살아있고 이후에 사라진다.

    - 컨트롤러 객체 내의 선언된 메소드 위에 기술되어있는 @ModelAttribute("객체명")의 기능
        [형식]  @ModelAttribute("객체명")
                메소드선언문() { ...; return 값; }
        해당 Controller안의 url이 호출될 때마다 먼저 request.setAttribute("conditionMap", 해당 메소드가 반환하는 return값); 객체를 생성해서 request에 전달함.

    * @SessionAttributes("객체명")
    session 객체에 setAttribute를 설정하는 어노테이션
    객체명은 반드시 model객체를 통해 setAttribute 설정이 되어있는 객체명과 동일해야함.
    @ModelAttribute를 감시하는 역할, 동기화 처리되는 역할

    @SessionAttributes("board") => 1번
    @RequestMapping(value = "/uploadBoard.do")
	public String updateBoard(@ModelAttribute("board") BoardVO vo, HttpSession session) {...} => 2번
    @RequestMapping(value = "/getBoard.do")
	public String getBoard(BoardVO vo, Model model) { model.addAttribute("board", boardService.getBoard(vo)); } => 3번

    [@SessionAttributes 사용조건]
        - 반드시 @ModelAttribute 어노테이션이 아닌 Model객체를 통해 데이터를 먼저 만들어 두어야 한다.
            ModelAndView : mav.addObject("속성명", 속성값);
            Model : 모델객체명.addAttribute("속성명", 속성값);
            request : request.setAttribute("속성명", 속성값);
        - 1번에 설정한 attribute의 속성명(key명)과 동일한 객체명으로 지정해줘야 한다.

