#JdbcTemplate
	: 개발자가 수동으로 SQL의 바인드처리, 데이터 베이스에 필요한 객체들의 생성, 연결, 해제, 반복 작업 등의 작업을 자동으로 제공해주는 스프링프레임워크의 탬플릿 패턴의 자료형
	- dbcp 기반

	- DBCP와 JdbcTemplate에 필요한 라이브러리들
	1. spring-jdbc(JdbcTemplate을 제공)
	<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
		<dependency>
    			<groupId>org.springframework</groupId>
    			<artifactId>spring-jdbc</artifactId>
    			<version>${org.springframework-version}</version>
		</dependency>

	2. dbcp 연결을 제공해주는 라이브러리
	<!-- https://mvnrepository.com/artifact/commons-dbcp/commons-dbcp -->
		<dependency>
    			<groupId>commons-dbcp</groupId>
    			<artifactId>commons-dbcp</artifactId>
    			<version>1.4</version>
		</dependency>

	3. 데이터베이스의 연결(jdbc)에 필요한 라이브러리
	<!-- https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client -->
		<dependency>
			<groupId>org.mariadb.jdbc</groupId>
			<artifactId>mariadb-java-client</artifactId>
			<version>2.7.3</version>
		</dependency>

	<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
		<dependency>
    			<groupId>mysql</groupId>
    			<artifactId>mysql-connector-java</artifactId>
    			<version>8.0.25</version>
		</dependency>

	<!-- https://mvnrepository.com/artifact/com.oracle/ojdbc6 -->
		<dependency>
    			<groupId>com.oracle</groupId>
    			<artifactId>ojdbc6</artifactId>
    			<version>11.2.0.4-atlassian-hosted</version>
		</dependency>

	* 선행작업
	1. 데이터베이스 연결객체 생성(jdbc)
	--------------------------------------------------------------------------------------------------------------------
	- 스프링빈 설정파일 
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="org.mariadb.jdbc.Driver"/>
		<property name="url" value="jdbc:mariadb://localhost:3306/test"/>
		<property name="username" value="root"/>
		<property name="password" value="1111"/>	
	</bean>
	--------------------------------------------------------------------------------------------------------------------
	또는
	--------------------------------------------------------------------------------------------------------------------
	- properties파일 (반드시 jdbc. 이 기술된 후에 필요한 키값을 설정해줘야 한다.)
	[예시] classpath:config/db.properties
	jdbc.driver=org.mariadb.jdbc.Driver
	jdbc.url=jdbc:mariadb://localhost:3306/test
	jdbc.username=root
	jdbc.password=1111

	- 스프링빈 설정파일 
	// properties 파일은 스프링빈 설정파일 당 1개만 연결할 수 있다. 두 개 작성 시 먼저 작성한 것이 적용.
	<context:property-placeholder location="classpath:config/db.properties, classpath:config/test.properties"/>
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>	
	</bean>

	<context:property-placeholder location="classpath:config/test.properties"/> // 적용 X. 여러 개가 필요할 경우 ,(콤마)로 연결
	--------------------------------------------------------------------------------------------------------------------
	2. Spring JdbcTemplate 객체 생성
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	--------------------------------------------------------------------------------------------------------------------

	사용방법 :
	1. JdbcDaoSupport 클래스 상속으로 사용
	DAO클래스에 반드시 ***JdbcDaoSupport 클래스를 상속***받아서 해당 클래스의 메소드들을 이용하여 사용가능.
	반드시 setter 주입으로 DataSource자료형의 (DBCP 연결객체) 데이터를 주입받는 처리를 해줘야 한다.
	public voide setSuperDataSource(DataSource dataSource) {
		super.setDataSource(dataSource);
	}

	2. JdbcTemplate 자료형의 객체를 멤버필드로 사용
	DAO클래스에 반드시 JdbcTemplate 자료형의 객체를 주입받아서 사용한다.
	상속받을 클래스도 필요없고 DataSource에 대한 설정도 필요없다. 단 JdbcTemplate객체를(bean) 생성할 때 setter주입(property 태그)으로 dataSource객체를 넣어주면 된다.

#JdbcTemplate 클래스 객체에서 제공되는 메소드

	insert, delete, update : Object... args 또는 Object[] args => SQL쿼리문의 바인드변수에 대응되는 값들
	=> int update(String sql, Object.. args);
	=> int update(String sql, Object[] args);
	* Object 자료형으로 넣어주는 이유 : 바인드변수로 들어갈 값의 자료형이 각각 다를 수 있기 때문에.
	[예시] int update("insert into board(title, writer, content) values(?, ?, ?)", "글제목입니다", "관리자", "내용입니다.");

	select(count(*) 포함 1줄 데이터를 가져오는 쿼리를 처리하는 경우, 단 값이 정수값 1개를 반환하는 쿼리만 가능. 단일행 단일 컬럼(정수값 1개))
	=> int queryForInt(String sql);
	[예시] queryForInt(select count(*) from board);
	=> int queryForInt(String sql, Object.. args);
	[예시] queryForInt("select count(*) from board where = ?", "관리자");
	=> int queryForInt(String sql, Object[] args);

	select(ResultSet 포함 ResultSet 데이터로 1줄 데이터를 가져오는 쿼리를 처리하는 경우, 정수값이 아니어도 가능. 단일행 다중 컬럼 데이터)
	* RowMapper<T>에서 <T>에 들어올 수 있는 자료형은 데이터베이스의 데이터를 한줄로 받아올 수 있는 VO 클래스 자료형으로 설정해줘야 한다.
	* queryForObject : 반드시 1줄만 가져올 수 있음.
	=> Object queryForObject(String sql, RowMapper<T> rowMapper);
	=> Object queryForObject(String sql, RowMapper<T> rowMapper, Object.. args);
	=> Object queryForobject(String sql, RowMapper<T> rowMapper, Object[] args);
	[예시] getJdbcTemplate().queryForObject("select * from board where seq = ?", new BoardRowMapper(), "0");

	select(ResultSet 데이터 여러 줄, 다중행 다중 컬럼의 데이터를 처리하는 경우)
	=> List<T> query(String sql, RowMapper<T> rowMapper);
	=> List<T> query(String sql, RowMapper<T> rowMapper, Object.. args);
	=> List<T> query(String sql, RowMapper<T> rowMapper, Object[] args);
	[예시] getJdbcTemplate().query("select * from board order by seq desc", new BoardRowMapper());

	** select(단일행, 다중행 모두) 데이터가 empty값(null 포함)을 반환하는 경우는 예외발생됨. 반드시 오류 예외처리 필요
	===============================================================================================================================================
	[예외처리 방법]
	1. try ~ catch ~로 처리하는 경우 : EmptyResultDataAccessException 또는 IncorrectResultSizeDataAccessException으로 예외처리해줄 것
	2. isEmpty() 메소드를 사용하여 조건문(if~else)으로 처리하는 경우 : jdbcTemplate.query(String sql, RowMapper<T> rowMapper).isEmpty()로 조건문 처리할 것


	===============================================================================================================================================
# six 프로젝트 boardServiceClient 메인클래스

	1. AbstractApplicationContext container = new GenericXmlApplicationContext("applicationContext.xml");
	-----------------------------------------------------------------------------------------------------------------------------------------------
		컨테이너 : container
		* 객체
		1. dataSource => 자료형 : BasicDataSource, DataSource (setter로 driver, url, username, password 설정 완료. 자동 close 설정 완료)
		2. boardDAOSpring => 자료형 : BoardDAOSpring, JdbcDaoSupport, 싱글톤, 즉시로딩 
		-> @Autowired DataSource dataSource ==> (1. dataSource 객체 주입)
		3. userDAOSpring => 자료형 : UserDAOSpring, JdbcDaoSupport, 싱글톤, 즉시로딩
		-> @Autowired DataSource dataSource ==> (1. dataSource 객체 주입)
		4. boardService => 자료형 : BoardServiceImpl, BoardService, 싱글톤, 즉시로딩
		-> @Autowired BoardDAOSpring boardDAO ==> (2. boardDAOSpring 객체 주입)
		5. userService => 자료형 : UserServiceImpl, UserService, 싱글톤, 즉시로딩
		-> @Autowired UserDAOSpring userDAO ==> (3. userDAOSpring 객체 주입)
		6. jdbcTemplate => 자료형 : JdbcTemplate, (setter로 1. dataSource 객체 설정)
	-----------------------------------------------------------------------------------------------------------------------------------------------
	2. BoardService boardService = (BoardService) container.getBean("boardService"); => 컨테이너에서 4번 boardService 객체 얻어옴.
	