#Spring 프레임워크의 MVC 구조
    - DispathcherServlet : 유일한 서블릿 클래스
    요청과 응답의 전반적인 제어를 처리하는 스프링에서 유일한 서블릿 컨트롤러(=Front Controller, Main Controller)를 말함.
    모든 클래스의 요청을 가장 먼저 처리하는 Front Controller이다.

    1. XmlWebApplicationContext 스프링컨테이너 구동

    2. Spring Bean Configuration File들을 읽어서 객체 생성 및 설정 처리 
    => Controller, DAO, HandlerMapping, ViewResolver 객체 등 생성
    => 의존성주입처리, DB객체 생성 등

    3. 요청과 응답에 대한 제어 관리
    => 핸들러맵핑, 컨트롤러 연결, 뷰리졸버 연결처리

    ------------------------------------------------------------------------------------------------------------------------------------------------------

    ContextLoaderListener 클래스
    => web.xml이 구동되면서 실행되는 서블릿컨테이너가 실행시키는 클래스
    => 기본적으로 설정이 되어있는 것이 없으면 /WEB-INF/applicationContext.xml 파일을 읽어들인다. (없는 경우 에러 발생)
    => <context-param>으로 설정한 Spring Bean Configuration 파일이 있으면 해당 파일을 읽어서 객체 생성 및 설정 등을 처리한다.
    => 해당 컨테이너는 루트 컨테이너라고 한다.
    ------------------------------------------------------------------------------------------------------------------------------------------------------
    - HandlerMapping : 클라이언트의 요청을 처리할 Controller 매핑한다.
    디스패쳐 서블릿에서 요청url을 핸들러 맵퍼에 보내면 해당 url에 맵핑이 되어있는 Controller 클래스를 찾아서 디스패쳐 서블릿으로 반환하는 기능을 담당함.

    - Controller : 실질적인 클라이언트의 요청을 처리한다.

    - ViewResolver : Controller가 리턴한 View 이름으로 실행될 jsp 경로를 완성해준다. (경로가 외부에 노출되지 않도록 해주는 기능도 가지고 있다.)
    요청이 모두 완료된 후에 디스패쳐 서블릿에서 클라이언트로 응답을 완료하기 전, 어떤 페이지를 보내야하는지 해당 페이지가 들어있는 경로를 찾아서 정확한 경로를 완성하여 디스패쳐 서블릿으로 보내는 기능을 담당함.
    ------------------------------------------------------------------------------------------------------------------------------------------------------
    ModelAndView 클래스 : Controller에서 처리한 데이터를 Model 객체에 담고, 응답할 경로 및 페이지 이동방식을 지정하는 역할을 함.
    ** 반드시 해당 클래스로 객체 생성을 하여 사용할 수 있다.

    ModelAndView mav = new ModelAndView();
    => 해당 클래스로 만든 객체는 request 객체로 만들어진다.
    => 해당 객체를 통해 mav.addObject(key, value) 메소드를 지정하는 것은 * request.setAttribute(key, value); 로직과 동일한 기능을 한다.
    => 데이터 담기 형식 : 모델앤뷰객체명.addObject(key, value);
    => url경로 설정 및 페이지 이동방식 설정 형식 : 모델앤뷰객체명.setViewName("[redirect:]url경로");

    Model(VO, DTO 클래스의 기능, 데이터를 저장하는 역할)
    View(응답을 보낼 url의 전체경로 또는 ViewResolver로 보낼 일부 경로를 기술, 페이지 이동방식(포워딩 또는 리다이렉팅)을 지정)
    ------------------------------------------------------------------------------------------------------------------------------------------------------
    차후 어노테이션 기반의 @Controller 처리를 이용하면 해당 Controller 객체에서 HandlerMapping와 Controller, View 이름 설정까지 모두 처리를 한다.
