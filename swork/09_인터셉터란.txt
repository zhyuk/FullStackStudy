인터셉터란(interceptor) => HandlerInterceptor
컨트롤러(Controller)의 '핸들러(Handler)'를 호출하기 전과 후에 요청과 응답을 참조하거나 가공할수 있는 객체

interceptor 란 단어는 '낚아채다'라는 의미이다. 
해당 단어의 의미와 같이 사용자 요청에 의해 서버에 들어온 Request 객체를
컨트롤러의 핸들러(사용자가 요청한 url에 따라 실행되어야 할 메서드, 이하 핸들러)로 도달하기전에 낚아채서 개발자가 원하는 추가적인 작업을 한후 핸들러로 보낼수 있도록 해주는것이 인터셉터 이다.
(**추가적인 작업으로는 로그인체크, 권한 체크 등이 있다.)

1) preHandle()
컨트롤러가 호출되기 전에 실행됨
컨트롤러가 실행 이전에 처리해야 할 작업이 있는경우 혹은 요청정보를 가공하거나 추가하는경우 사용
실행되어야 할 '핸들러'에 대한 정보를 인자값으로 받기때문에 '서블릿 필터'에 비해 세밀하게 로직을 구성할수 있음
리턴값이 boolean이며, 
리턴 값이 true 인 경우: 실행되어야 하는 컨트롤러로 돌려준다.
false인 경우 컨트롤러와 남은 인터셉터를 중단.

2) postHandle()
핸들러가 실행은 완료 되었지만 아직 View(대부분 jsp파일들)가 생성되기 이전에 호출된다.
ModelAndView 타입의 정보가 인자값으로 받는다. 
따라서 Controller에서 View 정보를 전달하기 위해 작업한 Model 객체의 정보를 참조하거나 조작할수 있다.
preHandle() 에서 리턴값이 false인경우 실행되지않음.
적용중인 인터셉터가 여러개 인경우, preHandle()는 역순으로 호출된다.
비동기적 요청처리 시에는 처리되지않음.


3)  afterCompletion()
모든 View에서 최종 결과를 생성하는 일을 포함한 모든 작업이 완료된 후에 실행된다.
요청 처리중에 사용한 리소스를 반환해주기 적당한 메서드 이다.
preHandle() 에서 리턴값이 false인경우 실행되지 않는다.
적용중인 인터셉터가 여러개인경우 preHandle()는 역순으로 호출된다.
비동기적 요청 처리시에 호출되지않음.


url패턴
? => 한 문자와 일치
* => 경로 세그먼트 내에서 0개 이상의 문자와 일치
** => 경로 끝까지 일치하는 0개 이상의 경로 세그먼트
★★★참고★★★: *과 달리 **는 AntPathMatcher패턴 **끝에서만 지원된다.
/pages/{**} 가능
/pages/{**}/details 불가능
=> **은 url경로 중간에 작성할 수 없음.

예시
1.  /pages/t?st.html 패턴인 경우 :  
예시:  /pages/test.html(일치)  /pages/tXst.html(일치) /pages/toast.html(불일치)

2. /resources/*.png 패턴인 경우 : /resources/ 디렉토리안에 있는 모든 .png파일과 일치

3. /resources/** 패턴인 경우 :  /resources/ 디렉토리를 포함하여 모든 파일 및 하위 경로안에 있는 폴더 파일까지 모두
예시:  /resources/image.png 또는  /resources/css/spring.css







