/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-09-03 08:18:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class _20_005f01_005fconnection_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Database SQL</title>\r\n");
      out.write("<style>\r\n");
      out.write("	table {\r\n");
      out.write("		border-collapse: collapse;\r\n");
      out.write("		width: 60%;\r\n");
      out.write("		margin: 0 auto;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	th {\r\n");
      out.write("		color: #fff;\r\n");
      out.write("		background: #555;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.tbr {\r\n");
      out.write("		border-right: 1px solid #fff !important;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	td, th {\r\n");
      out.write("		border: 1px solid #555;\r\n");
      out.write("		padding: 20px;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	tr>td:first-of-type {\r\n");
      out.write("		text-align: center;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	h1 {\r\n");
      out.write("		text-align: center;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");

		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			// String url = "jdbc:mariadb://localhost:3306:SID명";
			// String url = "jdbc:mysql://localhost:3306:SID명";
			String url = "jdbc:oracle:thin:@localhost:1521:XE";
			String user = "test";
			String password = "1111";
			
			// Class.forName("org.mariadb.jdbc.Driver");
			// Class.forName("com.mysql.jdbc.Driver");
			Class.forName("oracle.jdbc.driver.OracleDriver");
			conn = DriverManager.getConnection(url, user, password);
			System.out.println("데이터베이스 연결이 성공되었습니다.");
			
			String sql = "SELECT * FROM dept";
			stmt = conn.createStatement();
			rs = stmt.executeQuery(sql);
	
      out.write("\r\n");
      out.write("	    <h1>학생 테이블의 데이터 정보</h1>\r\n");
      out.write("	    <table>\r\n");
      out.write("	        <colgroup>\r\n");
      out.write("	            <col width=\"30\" />\r\n");
      out.write("	            <col width=\"30\" />\r\n");
      out.write("	            <col width=\"30\" />\r\n");
      out.write("	        </colgroup>\r\n");
      out.write("	        <tr>\r\n");
      out.write("	            <th class=\"tbr\">부서번호</th>\r\n");
      out.write("	            <th class=\"tbr\">부서명</th>\r\n");
      out.write("	            <th>위치</th>\r\n");
      out.write("	        </tr>\r\n");
      out.write("	");

		while(rs.next()){
			String deptno = rs.getString("DEPTNO");
			String dname = rs.getString("DNAME");
			String loc = rs.getString("LOC");
	
      out.write("\r\n");
      out.write("	        <tr>\r\n");
      out.write("	            <td>");
      out.print( deptno );
      out.write("</td>\r\n");
      out.write("	            <td>");
      out.print( dname );
      out.write("</td>\r\n");
      out.write("	            <td>");
      out.print( loc );
      out.write("</td>\r\n");
      out.write("        	</tr>\r\n");
      out.write("	");
        	}
		
			}catch(Exception ex){
				out.println("데이터베이스 연결이 실패하였거나 SQL문이 잘못되었습니다.<br>");
				out.println("SQLException: " + ex.getMessage());
			} finally {
				if(rs != null) rs.close();
				if(stmt != null) stmt.close();
				if(conn != null) conn.close();
			}
		
	
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
