/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-08-29 07:53:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.apache.commons.fileupload.*;
import java.util.*;
import java.io.*;
import java.sql.*;

public final class _11_005f02_005ffileupload02_005fprocess_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(10);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("org.apache.commons.fileupload");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>File Upload</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");

		// 현재 파일 위치의 상대경로 지정 가능
		// String savaPath = application.getRealPath("파일을 저장할 폴더");
		// 예시: String savaPath = application.getRealPath("\product");
		String fileUploadPath = "C:\\uploadts";
		
		// 파일업로드를 위해 객체 생성
		DiskFileUpload upload = new DiskFileUpload();
		
		// 파일최대크기 용량제한 . 최대로 업로드할 수 있는 파일의 크기를 바이트 단위로 지정
		// upload.setSizeMax(2 * 1024 * 1024); // 2MB 정도 = 1 * 1024 * 1024
		
		// 폼페이지에서 전송된 요청 파라미터 가져오기
		List items = upload.parseRequest(request);
		// 요청 파라미터를 모아놓은 items 배열객체를 가져오기 쉽게 iterator 객체로 변환함.
		Iterator<FileItem> params = items.iterator();
		
		while (params.hasNext()){
			FileItem fileItem = params.next(); // FileItem는 FormField 또는 Files이 존재함.
			if (fileItem.isFormField()){ // 파일이 아닐 경우
				// 필드 이름 = 파라미터명 = 속성명
				String name = fileItem.getFieldName(); // 파라미터명을 가져옴
				// 필드 값 = 파라미터 값 = 속성값, 한글 인코딩
				// getString() : 값을 가져오라는 의미. 
				// getBytes("8859_1") : URL에서 가장 안전한 인코딩 언어가 라틴계열이기 때문에 라틴계열로 인코딩되어 값이 들어옴.
				// "utf-8" : 다시 utf-8로 인코딩함.
				String value = new String(fileItem.getString().getBytes("8859_1"), "utf-8");
				out.print(name + ": " + value + "<br>");
			} else {
				String fileName = fileItem.getName();
				out.print("originfileName: " + fileName + "<br>");
				// 파일이름이 abc/after.jpg인 경우, abc/ 제거 => 파일이름에 경로가 붙어이을 경우 경로 제거
				fileName = fileName.substring(fileName.lastIndexOf("\\") +1); 
				// fileUploadPath : C:\\uploadts
				// fileName : after.jpg
				// ==> C:\\uploadts/after.jpg
				File file = new File(fileUploadPath + "/" + fileName);
				String originName = fileName; // originName = abc/after.jpg
				
				// 동일한 파일명이 존재하는 경우 파일명 변경하기
				// => 동일한 파일이 존재하는 경우 새 이름 생성하기
				// abc/ 처럼 디렉토리단위인 경우 : 폴더가 존재하는지 여부
				// abc/after.jpg 처럼 파일단위인 경우 : 해당 폴더에 파일이 존재하는지 여부
				if (file.exists()){
					long tsl = System.currentTimeMillis(); // 1728656468이면 
					/* 
						filName = after.jpg
						fileName.lastIndexOf(".") = 5 ==> 확장자만 가지고 옴.
						fileName: 1728656468.jpg
						
						
						file = fileUploadPath : C:\\uploadts +
						fileName = 1728656468.jpg
					*/
					fileName = tsl + fileName.substring(fileName.lastIndexOf("."));
					file = new File(fileUploadPath + "/" + fileName);
				}
				out.print("newfileName: " + fileName + "<br>");
				
				// 파일이 실제로 업로드되는 시점
				// C:\\uploadts/1728656468.jpg
				fileItem.write(file);
			}
		}
	
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
