/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-08-29 05:35:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class _11_005f01_005ffileupload01_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>File Upload</title>\r\n");
      out.write("<script>\r\n");
      out.write("	function addFileFnc() {\r\n");
      out.write("		/* .previousSibling : 노드단위. **공백까지도 포함한 텍스트. 나의 형제요소 중 바로 위의 형 요소 => <input type=\"file\" name=\"filename1\"> \r\n");
      out.write("		** 공백까지 포함하기 때문에 input태그와 button 태그 사이에 공백 입력하면 안됨.\r\n");
      out.write("		.getAttribute(\"name\").replace(\"filename\", \"\")) + 1 : <input type=\"file\" name=\"filename1\"> 의 name 속성을 가져와서 filename을 빈 문자열로 대체. \r\n");
      out.write("			=>  <input type=\"file\" name=\"1\"> +1 => <input type=\"file\" name=\"2\">\r\n");
      out.write("		*/\r\n");
      out.write("		let fileAttr = Number(document.getElementById(\"addFileBtn\").previousSibling.getAttribute(\"name\").replace(\"filename\", \"\")) + 1; \r\n");
      out.write("		\r\n");
      out.write("		let filesLength = document.querySelectorAll(\"input[type=file]\").length;\r\n");
      out.write("		// let btn = document.getElementById(\"addFileBtn\").cloneNode(true); btn 객체에 addFileBtn 아이디값을 가진 태그 복제함.\r\n");
      out.write("		let btn = document.getElementById(\"addFileBtn\").cloneNode(true);\r\n");
      out.write("		document.getElementById(\"addFileBtn\").remove();\r\n");
      out.write("\r\n");
      out.write("		let ptag = document.createElement(\"p\");\r\n");
      out.write("		ptag.innerHTML = '파 일 : <input type=\"file\" name=\"filename'+ (fileAttr)+ '\"><button type=\"button\" id=\"addFileBtn\" onclick=\"addFileFnc()\">버튼 추가</button>';\r\n");
      out.write("		\r\n");
      out.write("		document.getElementById(\"filesDiv\").appendChild(ptag);\r\n");
      out.write("		// <p>파 일 : <input type=\"file\" name=\"filename2\" multiple></p> 생성됨\r\n");
      out.write("\r\n");
      out.write("		if (filesLength == 4) document.getElementById(\"addFileBtn\").remove();\r\n");
      out.write("		// <p>파 일 : <input type=\"file\" name=\"filename\" multiple></p>가 4개만 생성된 후 사라짐. 5개만 올릴 수 있도록 제한\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	let extArr = [ \"jpg\", \"png\", \"gif\", \"jpeg\", \"svg\", \"bmp\", \"webp\" ];	\r\n");
      out.write("	window.onload = function() {\r\n");
      out.write("		// fileForm : input[name=fileForm] => form 태그 내 입력요소의 name속성을 기술할 경우 name속성명만 기술해도 된다.\r\n");
      out.write("		fileForm.addEventListener('submit', function(e) {\r\n");
      out.write("			\r\n");
      out.write("			let lenTF = false, extTF = false;\r\n");
      out.write("			let attrStr = document.querySelector(\"input[type=file]\").getAttribute('multiple');\r\n");
      out.write("			let cnt = 0;\r\n");
      out.write("			let imgs;\r\n");
      out.write("			\r\n");
      out.write("			// multiple 속성이 존재하는 input type='file'만 가능\r\n");
      out.write("			// multiple : 파일 여러 개를 업로드할 수 있게하는 속성. \r\n");
      out.write("			// .files : 업로드한 파일들을 \"파일배열\"형식으로 가져오는 속성 => 문자열 X 파일로 배열에 담아둠.\r\n");
      out.write("			if(attrStr == 'multiple'){\r\n");
      out.write("				//mutiple속성이 존재하는 input type='file'만 가능\r\n");
      out.write("				imgs = document.querySelector(\"input[type=file]\").files;\r\n");
      out.write("				for (let i = 0; i < imgs.length; i++) {\r\n");
      out.write("					let extension = imgs[i].name.substring(imgs[i].name.lastIndexOf(\".\") + 1);\r\n");
      out.write("					extArr.forEach(function(obj) {\r\n");
      out.write("						if (obj == extension.toLowerCase()) cnt++;\r\n");
      out.write("					});\r\n");
      out.write("				}\r\n");
      out.write("			}else{\r\n");
      out.write("				imgs = document.querySelectorAll(\"input[type=file]\");\r\n");
      out.write("				for (let i = 0; i < imgs.length; i++) {\r\n");
      out.write("					let extension = imgs[i].files[0].name.substring(imgs[i].files[0].name.lastIndexOf(\".\") + 1);\r\n");
      out.write("					extArr.forEach(function(obj) {\r\n");
      out.write("						if (obj == extension.toLowerCase()) cnt++;\r\n");
      out.write("					});\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			if (cnt != imgs.length) alert(\"이미지 파일만 업로드 하실 수 있습니다.\");\r\n");
      out.write("			else extTF = true;\r\n");
      out.write("\r\n");
      out.write("			let filesLength = imgs.length;\r\n");
      out.write("			if (filesLength > 5) alert(\"파일은 최대 5개까지만 업로드할 수 있습니다.\");\r\n");
      out.write("			else  lenTF = true;\r\n");
      out.write("			\r\n");
      out.write("			if (!(lenTF && extTF)) e.preventDefault(); //기본이벤트 방지\r\n");
      out.write("		});\r\n");
      out.write("	};\r\n");
      out.write("</script></head><body>\r\n");
      out.write("	<h2>MultipartRequest를 이용한 파일 업로드</h2>\r\n");
      out.write("	<dl><dd>\r\n");
      out.write("		- cos.jar파일 필요: \r\n");
      out.write("		<a href=\"https://mvnrepository.com/artifact/com.servlets/cos/05Nov2002\">다운 받기</a>\r\n");
      out.write("	</dd></dl>\r\n");
      out.write("	<form name=\"fileForm\" method=\"post\" enctype=\"multipart/form-data\" action=\"11_01_fileupload01_process.jsp\">\r\n");
      out.write("		<fieldset name=\"fld\">\r\n");
      out.write("			<legend>파일 업로드 폼</legend>\r\n");
      out.write("			<p> 이 름 : <input type=\"text\" name=\"name\"> </p>\r\n");
      out.write("			<p> 제 목 : <input type=\"text\" name=\"subject\"> </p>\r\n");
      out.write("<!-- 			<p>  -->\r\n");
      out.write("<!-- 			<input type=\"checkbox\" name=\"sel\" value=\"가\">가 -->\r\n");
      out.write("<!-- 			<input type=\"checkbox\" name=\"sel\" value=\"나\">나 -->\r\n");
      out.write("<!-- 			<input type=\"checkbox\" name=\"sel\" value=\"다\">다 -->\r\n");
      out.write("<!-- 			</p> -->\r\n");
      out.write("			<div id=\"filesDiv\">\r\n");
      out.write("				<p> 파 일 : <input type=\"file\" name=\"filename\" multiple='multiple'> </p>\r\n");
      out.write("<!-- 				<p>	파 일 : <input type=\"file\" name=\"filename1\"><button type=\"button\" id=\"addFileBtn\" onclick=\"addFileFnc()\">버튼 추가</button></p> -->\r\n");
      out.write("			</div>\r\n");
      out.write("			<p> <input type=\"submit\" value=\"파일 올리기\"> </p>\r\n");
      out.write("		</fieldset>\r\n");
      out.write("	</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
