/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-08-27 03:36:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Enumeration;
import java.util.Map;

public final class _08_005f05_005fformParameter_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("java.util.Enumeration");
    _jspx_imports_classes.add("java.util.Map");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

// request의 데이터 영역에 저장된 데이터(post 방식)의 인코딩만 설정할 때 사용함.
// get 방식은 인코딩 안됨. get 방식은 방식에 따라 웹페이지의 인코딩이나 브라우저의 인코딩으로 적용됨
request.setCharacterEncoding("utf-8");

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>request 객체의 파라미터를 가져오는 메소드 종류</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>request 객체의 파라미터를 가져오는 메소드 종류</h1>\r\n");
      out.write("	<b>request.getParameter(\"파라미터의 name명과 대소문자 반드시 일치\") : </b> 한 개의 인자값만을 가져오는 경우 사용한다.<br><br>\r\n");
      out.write("	\r\n");
      out.write("<!-- 	request.getParameter(\"name\") -> request 객체에 접근해서 Parameter 객체 접근해서 그 내부에 있는 address 속성의 속성값 가져온다는 의미 -->\r\n");
      out.write("	name 파라미터 = ");
      out.print( request.getParameter("name") );
      out.write("<br>\r\n");
      out.write("	address 파라미터 = ");
      out.print( request.getParameter("address") );
      out.write("<br>\r\n");
      out.write("	<br><hr><br>\r\n");
      out.write("	\r\n");
      out.write("	<b>request.getParameterValues() : </b> 여러 개의 인자값을 가져오는 경우 사용한다. 배열 객체를 이용하여 받을 수 있다.<br><br>\r\n");
      out.write("	");

	// request.getParameterValues("pet"); --> request 객체에 접근해서 배열로 되어있는 속성 pet의 속성값을 가져온다. 값이 없을 경우 null 반환
	String[] values = request.getParameterValues("pet");
	out.print("values: " + values + "<br>");
	if(values != null){
		for(int i = 0; i < values.length; i++) {
			out.println(values[i]);
		}
		
// 		for(String i : values) {
// 			out.println(i);
// 		}
	}
	
      out.write("\r\n");
      out.write("	<hr><br>\r\n");
      out.write("	<b>request.getParameterNames() : </b> 인자값에 매칭되어 있는 name 속성값을 가져온다. 동일한 속성명은 1개만 가져온다.<br><br>\r\n");
      out.write("	\r\n");
      out.write("	");

	int i = 0;
	Enumeration<String> paramEnum = request.getParameterNames(); // "name" "address" "pet"
	while(paramEnum.hasMoreElements()){ // hasMoreElements() :  다음 요소가 있는지 탐색만. 있으면 true, 없으면 false 반환 
		i++;
		String name = paramEnum.nextElement(); // 다음 요소를 가져와 name 변수에 저장.
		out.print("폼 요소의 name속성명 [" + i + "번] : " + name + "<br>" ); // 출력
	}
	
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
