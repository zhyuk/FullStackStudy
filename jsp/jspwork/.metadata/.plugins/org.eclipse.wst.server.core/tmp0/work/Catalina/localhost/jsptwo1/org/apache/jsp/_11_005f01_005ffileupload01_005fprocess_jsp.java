/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-08-29 03:51:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.oreilly.servlet.*;
import com.oreilly.servlet.multipart.*;
import java.util.*;
import java.io.*;

public final class _11_005f01_005ffileupload01_005fprocess_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(10);
    _jspx_imports_packages.add("com.oreilly.servlet");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("com.oreilly.servlet.multipart");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	// MultipartRequest(request객체, "파일저장경로", 최대허용용량, "인코딩설정",new DefaultFileRenamePolicy());
	// DefaultFileRenamePolicy() 메소드는 파일이름이 중복될 경우 파일명 뒤에 1과 같은 숫자를 붙여 파일 이름을 rename해주는 역할을 한다.
	// MultipartRequest는 객체를 생성하자마자 파일을 바로 업로드한다.
	// 파일을 저장할 경로는 직접 써주기 보다는 톰캣의 내장 객체인 application 객체의 getRealPath() 메소드를 사용하는 것이 좋다.
	
	// String savaPath = application.getRealPath("파일을 저정할 폴더");
	// 예시: String savaPath = application.getRealPath("\product");
	// MultipartRequest multi = new MultipartRequest(request.savaPath);
	// 용량: 1024 * 1024 * 5 => 5MB / 1024 * 1024 * 1024 * 5 => 5GB
			
			String savaPath = "C:\\upload";
			File targetDir = new File(savaPath);
			
			// 디렉토리가 없을 경우 생성하기 // 없을 경우 윈도우 운영체제에서는 에러 발생.
			if(!targetDir.exists()) targetDir.mkdirs();
			
			MultipartRequest multi = new MultipartRequest(request, savaPath, 5 * 1024 * 1024 * 1024, "utf-8", new DefaultFileRenamePolicy());
			
			// 전송된 파일 타입의 파라미터 이름들을 Enumeration타입으로 반환한다.
			// Enumeration은 객체타입을 저장하는 것으로서 형변환이 없이 객체 타입을 자유롭게 저장하고 꺼내기 위해서 사용한다.
			// MultipartRequest를 사용하게 되면 톰캣의 request 객체의 getParameter 메소드를 이용하여 값을 전달받지 못한다.
			// 따라서 MultipartRequest를 사용하고 값을 전달받기 위해서는 MultipartRequest 객체의 getParameter 메소드를 이용하여 값을 전달받아야 한다.
			// 파일에 대한 정보는 파라미터로 가져올 수가 없다.
			
			Enumeration params = multi.getParameterNames();
			while(params.hasMoreElements()){
				String name = (String)params.nextElement();
				String value = multi.getParameter(name);
				out.println(name + " = " + value + "<br>");
				
// 				String[] values = multi.getParameterValues(name);
// 				for(String value : values){
// 					out.println(name + " = " + value + "<br>");
// 				}
			}
			out.println("------------------------------------<br>");
			
			Enumeration files = multi.getFileNames();
			while(files.hasMoreElements()){
				String name = (String) files.nextElement();
				
				String originfilename = multi.getOriginalFileName(name);
				String filename = multi.getFilesystemName(name);
				String type = multi.getContentType(name);
				File file = multi.getFile(name);
				
				out.println("요청 파라미터 이름 : " + name + "<br>");
				out.println("기존 파일명 : " + originfilename + "<br>");
				out.println("새 파일명 : " + file.getName() + "<br>");
				out.println("새 파일명 : " + filename + "<br>");
				out.println("파일 콘텐츠 타입 : " + type + "<br>");
				
				if(file != null){
					out.println("파일 크기 : " + file.length());
					out.println("<br>");
				}
			}

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
