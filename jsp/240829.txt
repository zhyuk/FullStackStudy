#에러
	[범위]
	try ~~ catch : try문 내에 기술된 코드의 에러만
	errorPage : 해당 코드가 기술된 페이지 내
	web.xml : 해당 프로젝트 내
	브라우저 에러 : 모든 프로젝트

	* 범위가 작은 것부터 우선적용된다.

	* 에러.jsp 파일에서 exception 객체를 사용할 수 있는 이유 : 상단에 지시태그를 사용해 page isErrorPage="true" 선언

#web.xml 
	* 프로젝트 내에 web.xml : 해당 프로젝트의 전반적인 정보를 설정, 변경할 때 사용하는 파일
	* 톰캣 서버의 web.xml : 모든 프로젝트의 정보를 설정, 변경할 때 사용.
	<error-page> : 한 개의 에러 페이지를 지정
	<error-code> : http 에러코드 값을 설정
	<location> : 해당 에러가 발생될 경우 띄울 에러 페이지 경로를 설정
	<exceptin-type> : 익셉션 종류별로 에러 페이지 지정
	<welcome-file-list> : url에 컨텍스트명까지 기술하고 접속 시 내부에 작성된 파일 실행
    	<welcome-file>index.html</welcome-file> :  url에 컨텍스트명까지 기술하고 접속 시 index.html 실행

#파일 업로드
	* 반드시 파일을 업로드 하기 위한 라이브러리가 필요하다.
	필요라이브러리 : MultipartRequest
	[파일 업로드 조건]
		- form태그의 method="post"
		- form태그의 enctype="multipart/form-data"
		- form태그 안에 input type="file"인 태그가 존재해야 한다.
	
	* 라이브러리 추가 후 라이브러리 파일 읽는 방법
	이클립스 Help - Eclipse Marketplace - Decompiler 검색 - Enhanced Class Decompiler 3.5.1 설치 - 재시작
	Window - Preperences - Java - Decompiler - Default Class Decompiler [FernFlower] 
	Window - Preperences - General - Editors - File Associations - File types [*.class] 선택 - Associated editors: [Decompiler Viewer] 선택 - Default 클릭 - Apply and Close 
Window - Preperences - General - Editors - File Associations - File types [*.class without source] 선택 - Associated editors: [Decompiler Viewer] 선택 - Default 클릭 - Apply and Close 

	1. cos.jar (MultipartRequest 자료형을 통해 데이터를 분해하여 가져올 수 있다.)
	=> 업로드할 디렉토리(경로)가 존재하지 않으면 에러 발생(윈도우만. 맥OS, 리눅스는 자동으로 생성해줌)
	=> 여러 개의 파일을 하나의 name으로 같이 묶어서 전송한 경우는 파일명을 각각 떼어낼 수 없다.
	=> FilePolicy를 설정하면 동일한 이름의 파일(확장자까지 동일)의 이름을 자동으로 새 이름으로 변경함. 이름 뒤에 숫자 1, 2, 3... 등이 붙음(내가 원하는 새 이름으로 지정하기가 어려움)
	=> FilePolicy를 설정하지 않으면 나중의 파일로 덮어쓰기 됨.

	2. commons-fileupload, commons-io 
	(DiskFileUpload 자료형을 통해 데이터를 분해하여 가져올 수 있다.)
	=> 업로드할 디렉토리가 존재하지 않으면 자동으로 디렉토리 생성
	=> 여러 개의 파일을 하나의 name으로 같이 묶어서 전송하여도 이름을 각각 분리하기가 쉽다.
	=> FilePolicy 정책을 설정하는 부분이 없다.
	=> 내가 원하는 새 이름으로 변경하기가 쉽다.
	=> 만약 새 이름으로 변경하는 로직이 없는 경우 동일한 이름을 가진 파일을 업로드 할 경우 에러 발생됨.

	3. Part클래스 (라이브러리가 필요없으며, 서블릿 3.0버전 이상만 사용가능함.)
	- 반드시 톰캣의 context.xml의 Context 태그의 설정과 Resource태그의 설정이 필요하다.
	- 경우에 따라 (필요한 경우) 톰캣의 server.xml 설정도 필요함.
	- 저장하려는 디렉토리 경로가 없는 경우에는 에러 발생
	- 새 이름으로 파일을 변경하기 용이하며, 만약 변경하는 로직이 없는 경우 동일한 파일의 이름을 업로드 할 때 나중의 파일로 덮어쓰기가 된다.
	- request객체를 그대로 사용하여 데이터를 분해할 수 있다.

	* Part 클래스를 사용할 경우, 톰캣의 context.xml의 Context 태그의 설정과 Resource태그의 설정
		- 모든 컨텍스트에 멀티파트 허용. 
		<Context allowCasualMultipartParsing="true" path="/">
		- 임시저장공간(캐시)가 필요함. 해당 임시저장공간을 허용하겠다는 의미와 공간의 크기를 설정.
		<Resources cachingAllowed="true" cacheMaxSize="1048576" /> 