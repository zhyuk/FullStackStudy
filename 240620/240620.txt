문자열 객체는 System.out.println();과 만나면 자동으로 문자열.toString()으로 반환된다.
ex)
String str = new Stirng("abcd");
System.out.println(str); // str 객체의 주소값이 아닌 abcd 출력됨

#return
키워드 return : 메소드의 종료 중괄호를 빠져나간다. (=메소드를 종료하세요.) 
* return은 항상 마지막에 위치해야한다.
ex) 
public String say_nick(String nick){
	if ("fool".equals(nick){
		return "OK";
	}
	return "no";
	System.out.println();
} 
=> 해당 경우에는 nick의 값이 fool이라면 if문을 타고, 그렇지 않으면 바로 "no"라는 값을 반환하고 메소드가 종료되기 때문에, 출력문이 실행되지 않고 누락되어 넘어간다.
따라서, return은 메소드의 가장 마지막에 작성하는 것이 바람직하다.
ex)
public String say_nick(String nick){
	if ("fool".equals(nick){
		return "OK";
	}
	System.out.println();
	return "no";
} 

#싱글톤
싱글톤 패턴 (SingleTon) : 객체를 한 개만 생성할 수 있도록 강제하는 패턴

- 싱글톤의 조건
	- 생성자의 접근제어자는 private이어야 한다.
	- private static 으로 선언된 나의 자료형으로 선언된 객체가 멤버필드로 존재해야 한다.
	- 반드시 객체를 반환해주는 메소드에 static 제어자가 존재해야 한다.
ex)
class Ex{
	private static Ex e; // 기본값은 default기 때문에 외부에서 접근할 수 있음. 따라서 private 처리해줘야함.
	private Ex(){}
	public static Ex getInstance(){
		if (e == null){ // e의 값이 null인 경우
			e = new Ex(); // 새로운 공간에 복사하고 그 주소값을 객체 e에 넣겠습니다.
		} 
		return e; // 객체 e 반환
	}
}

#상속

Object : 자바의 최상위 부모(조상) 클래스, 자동상속이 이루어지는 자료형임.

어노테이션 : 특수한 기능을 품고 있는 주석
	- 형식 : @어노테이션명
	- 종류 
		생략 가능한 어노테이션 : 해당 내용에 대해 설명만 하는 기능만 있는 어노테이션들 ( ex) @Override)
		생략 불가능한 어노테이션 : 어떠한 기능을 코드에 수행할 수 있도록 도움을 주는 어노테이션들 ( ex) @WebFilter, ...)

Override / Overriding = 재정의(덮어씌우기) : 부모, 자식 간의 관계가 존재하는 클래스들이면서 부모안에 들어있는 메소드를 자식 클래스에서 새롭게 다시 정의하거나 구체화하는 방식을 오버라이드, 오버라이딩이라고 한다.
- 오버라이딩 조건
	- 부모보다 자식의 접근제어자의 영역이 같거나 커야 한다.
		ex)
		class P {
			void md(){
			}
		} 

		class C extends P {
			public void md(){
			}
		}


상속(inheritance) : 부모 클래스의 속성, 기능들을 자식 클래스가 물려받아서 사용할 수 있는, 구체화할 수 있는 것

- 상속을 사용하는 이유 : 형변환 용이, 다형성(polymorphizm), 보안
	* 다형성 : 한 개의 객체가 여러 개의 자료형을 가지고 있는 것.
		ex) Box b = new Box(); // b => 대표자료형 : Box, 숨겨있는 자료형 : Object  // 따라서,  b 객체는 Object에 포함된 메소드까지 사용할 수 있다.
		Pa p = new Cha1(); // 대표자료형 : Pa, 숨겨있는 자료형 : Object, Cha1 //  

- 상속의 종류
	- 확장(클래스간 상속) : 부모 클래스와 자식 클래스의 기능을 모두 사용할 수 있다. = 기능 업그레이드
	- 일반화(구체화) (인터페이스)  : 부모 클래스의 메소드의 기능을 다른 방식으로 재정의하거나 구체화(자세게 만드는 것)할 수 있다. = 기능 체인지 용이

- 상속의 형식 
	- 동급의 자료형인 경우 (클래스 == 추상클래스 != 인터페이스)
		ex) 부모 : 클래스, 자식 : 클래스 = 동급
		[접근제어자] class 자식클래스명 extends 부모클래스{}
		[접근제어자] class 자식클래스명 extends 부모추상클래스{}
		[접근제어자] class 자식인터페이스 extends 부모인터페이스{}

	- 동급이 아닌 자료형인 경우
		ex) 부모 : 인터페이스, 자식 : 클래스 = 동급 X
		[접근제어자] class 자식클래스 implements 부모인터페이스{}
		[접근제어자] class 자식추상클래스 implements 부모인터페이스{}

- 상속의 조건
	- 클래스급 이상에서는 상속관계에서만 형변환이 가능하다.
	- 인터페이스는 클래스를 상속받을 수 없다.
	- 반드시 부모와 자식이라는 관계가 존재해야 한다.
		부모 : 상위, Super, 기본
		자식 : 하위, Sub, 파생
	- 부모는 자식을 받을 수 있다. 자식은 부모를 받을 수 없다.
		부모 클래스 : Pather
		자식 클래스 : Children
		Pather p = new Pather(); // Pather 내에 있는 것을 사용하기 위해 객체 선언 // 가능.
		Pather p = new Children(); // 자료형은 Pather지만, 생성자는 자식 클래스로 선언 // 가능.
		Children c = new Pather() // 불가능.
	- 클래스는 다중 상속이 되지 않는다.
	- 인터페이스는 다중 상속이 가능하다.

- 상속관계에서 강제형변환이 가능한 조건 
	- 강제로 변환할 자료형에 내가 변환하고자 하는 자료형이 존재해야만 한다.
	ex) 
		Pa p = new Cha1(); // 자료형 : Pa, Object, Cha1

		Cha1 c = (Cha1) p; // O
		-------------------------------------------
		Pa p = new Pa(); // 자료형 : Pa, Object

		Cha1 c = (Cha1)p; // X