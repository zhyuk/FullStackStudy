선택구조형 프로그래밍
- 조건문 : 조건에 의해 처리하는 실행문의 흐름을 제어하는 명령문

- if문
* 실행코드가 한 개인 경우 실행할 코드의 {} 생략가능 
if( i <= 5 ) {System.out.println("1번");} <=> if( i <= 5 ) System.out.println("1번");

- switch ~ case문
* 조건값 : int 이하 정수값, char, 문자열(String)
* break;를 감싸고 있는 가장 가까운 switch 문의 종료 중괄호 밖으로 빠져나온다.
[기본구조]
	switch ( 조건값 ) {
		case 케이스값 1 : 실행문; [break;]
		case 케이스값 2 : 실행문; [break;]
		case 케이스값 3 : 실행문; [break;]
		default : 실행문; [break;]
	} 

* [break;]가 없을 경우 밑에 작성된 실행문도 모두 실행된다. 
ex)
	switch ( int a = 3; ) {
		case 1 : 실행문; [break;]
		case 2 : 실행문; [break;]
		case 3 : 실행문; [break;] // case 3만 실행
		default : 실행문; [break;]
	} 

	switch ( int a = 3; ) {
		case 1 : 실행문; 
		case 2 : 실행문; 
		case 3 : 실행문; // case 3 ~ 5까지  실행
		case 4 : 실행문;
		case 5 : 실행문;
		default : 실행문;
	} 

------

- 삼항식
조건식 또는 조건값 ? 참일 경우 실행코드 : 거짓일 경우 실행코드 
if ~ else문을 축약할 수 있다.

ex )
if ( a > b ) { max = a; } else {max= b;} => int max = ( a > b ) ? a : b;


---- 

반복구조 프로그래밍
- 반복문 => 어떠한 연산을 여러 번 실행해야 하는 경우 사용, 연산의 흐름을 제어하는 제어문 중의 하나이다.
	- for문 : for (초기값;조건식;증감식){실행코드; *필요에 따라 break; 사용*}
	ex ) for ( int i = 10; i <= 10; i++ ) { System.out.println(i); }
	초기값을 for문 밖에서 선언 시 전역에서 사용 가능, for문 내 선언 시 for문 내에서만 사용 가능.

		-break;와 continue;의 사용
		for문에서는 실행코드에 필요에 따라 break;와 continue; 키워드를 작성할 수 있다.
		break; : for문을 종료한다.
		continue; : for문의 증감식으로 돌아간다.

	- while문 : while (조건식 또는 조건값) {실행코드; 탈출조건식}
	ex ) int a = 1;
	  while (a <= 10) {
		실행코드;
		a++; (탈출조건식)

	- do ~ while문 : do {실행코드; *반드시 탈출조건*;} while (조건식);
	코드는 위에서부터 읽어나가기 때문에 조건에 상관없이 최초의 실행코드는 작동한다. 


무한반복문 : 탈출이 되지 않도록 무제한으로 반복을 하는 제어문

for문 형식 :	for(;;){
			실행할 명령문;
			**반드시 반복문을 탈출할 수 있는 조건
		}

while문 형식 : 	while(true){
			실행할 명령문;
			**반드시 반복문을 탈출할 수 있는 조건
		}

do~while문 형식 : 	do{
			실행할 명령문;
			**반드시 반복문을 탈출할 수 있는 조건
		} while(true);


========
oneide 검색 -> codepen처럼 웹 브라우저에서 확인할 수 있음.